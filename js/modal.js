!function(){"use strict";var t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(t,n){return t(n={exports:{}},n.exports),n.exports}var Wt=n(function(t){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)}),e={}.hasOwnProperty,zt=function(t,n){return e.call(t,n)},Ht=function(t){try{return!!t()}catch(t){return!0}},Kt=!Ht(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),d=n(function(t){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)}),Yt=(d.version,function(t){return"object"==typeof t?null!==t:"function"==typeof t}),v=function(t){if(!Yt(t))throw TypeError(t+" is not an object!");return t},r=Wt.document,i=Yt(r)&&Yt(r.createElement),o=function(t){return i?r.createElement(t):{}},u=!Kt&&!Ht(function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}),Jt=function(t,n){if(!Yt(t))return t;var e,r;if(n&&"function"==typeof(e=t.toString)&&!Yt(r=e.call(t)))return r;if("function"==typeof(e=t.valueOf)&&!Yt(r=e.call(t)))return r;if(!n&&"function"==typeof(e=t.toString)&&!Yt(r=e.call(t)))return r;throw TypeError("Can't convert object to primitive value")},a=Object.defineProperty,Zt={f:Kt?Object.defineProperty:function(t,n,e){if(v(t),n=Jt(n,!0),v(e),u)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},Xt=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}},$t=Kt?function(t,n,e){return Zt.f(t,n,Xt(1,e))}:function(t,n,e){return t[n]=e,t},c=0,f=Math.random(),Qt=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++c+f).toString(36))},b=n(function(t){var o=Qt("src"),n="toString",e=Function[n],u=(""+e).split(n);d.inspectSource=function(t){return e.call(t)},(t.exports=function(t,n,e,r){var i="function"==typeof e;i&&(zt(e,"name")||$t(e,"name",n)),t[n]!==e&&(i&&(zt(e,o)||$t(e,o,t[n]?""+t[n]:u.join(String(n)))),t===Wt?t[n]=e:r?t[n]?t[n]=e:$t(t,n,e):(delete t[n],$t(t,n,e)))})(Function.prototype,n,function(){return"function"==typeof this&&this[o]||e.call(this)})}),s=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t},tn=function(r,i,t){if(s(r),void 0===i)return r;switch(t){case 1:return function(t){return r.call(i,t)};case 2:return function(t,n){return r.call(i,t,n)};case 3:return function(t,n,e){return r.call(i,t,n,e)}}return function(){return r.apply(i,arguments)}},y="prototype",g=function(t,n,e){var r,i,o,u,a=t&g.F,c=t&g.G,f=t&g.S,s=t&g.P,l=t&g.B,h=c?Wt:f?Wt[n]||(Wt[n]={}):(Wt[n]||{})[y],p=c?d:d[n]||(d[n]={}),v=p[y]||(p[y]={});for(r in c&&(e=n),e)o=((i=!a&&h&&void 0!==h[r])?h:e)[r],u=l&&i?tn(o,Wt):s&&"function"==typeof o?tn(Function.call,o):o,h&&b(h,r,o,t&g.U),p[r]!=o&&$t(p,r,u),s&&v[r]!=o&&(v[r]=o)};Wt.core=d,g.F=1,g.G=2,g.S=4,g.P=8,g.B=16,g.W=32,g.U=64,g.R=128;var nn=g,m=n(function(t){var e=Qt("meta"),n=Zt.f,r=0,i=Object.isExtensible||function(){return!0},o=!Ht(function(){return i(Object.preventExtensions({}))}),u=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},a=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!Yt(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!zt(t,e)){if(!i(t))return"F";if(!n)return"E";u(t)}return t[e].i},getWeak:function(t,n){if(!zt(t,e)){if(!i(t))return!0;if(!n)return!1;u(t)}return t[e].w},onFreeze:function(t){return o&&a.NEED&&i(t)&&!zt(t,e)&&u(t),t}}}),l=(m.KEY,m.NEED,m.fastKey,m.getWeak,m.onFreeze,n(function(t){var n="__core-js_shared__",e=Wt[n]||(Wt[n]={});(t.exports=function(t,n){return e[t]||(e[t]=void 0!==n?n:{})})("versions",[]).push({version:d.version,mode:"global",copyright:"Â© 2018 Denis Pushkarev (zloirock.ru)"})})),en=n(function(t){var n=l("wks"),e=Wt.Symbol,r="function"==typeof e;(t.exports=function(t){return n[t]||(n[t]=r&&e[t]||(r?e:Qt)("Symbol."+t))}).store=n}),h=Zt.f,p=en("toStringTag"),V=function(t,n,e){t&&!zt(t=e?t:t.prototype,p)&&h(t,p,{configurable:!0,value:n})},_={f:en},w=Zt.f,S=function(t){var n=d.Symbol||(d.Symbol=Wt.Symbol||{});"_"==t.charAt(0)||t in n||w(n,t,{value:_.f(t)})},E={}.toString,x=function(t){return E.call(t).slice(8,-1)},O=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==x(t)?t.split(""):Object(t)},A=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t},P=function(t){return O(A(t))},M=Math.ceil,F=Math.floor,rn=function(t){return isNaN(t=+t)?0:(0<t?F:M)(t)},j=Math.min,on=function(t){return 0<t?j(rn(t),9007199254740991):0},T=Math.max,I=Math.min,un=function(t,n){return(t=rn(t))<0?T(t+n,0):I(t,n)},an=function(a){return function(t,n,e){var r,i=P(t),o=on(i.length),u=un(e,o);if(a&&n!=n){for(;u<o;)if((r=i[u++])!=r)return!0}else for(;u<o;u++)if((a||u in i)&&i[u]===n)return a||u||0;return!a&&-1}},L=l("keys"),N=function(t){return L[t]||(L[t]=Qt(t))},R=an(!1),k=N("IE_PROTO"),C=function(t,n){var e,r=P(t),i=0,o=[];for(e in r)e!=k&&zt(r,e)&&o.push(e);for(;n.length>i;)zt(r,e=n[i++])&&(~R(o,e)||o.push(e));return o},D="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),U=Object.keys||function(t){return C(t,D)},B={f:Object.getOwnPropertySymbols},G={f:{}.propertyIsEnumerable},q=Array.isArray||function(t){return"Array"==x(t)},W=Kt?Object.defineProperties:function(t,n){v(t);for(var e,r=U(n),i=r.length,o=0;o<i;)Zt.f(t,e=r[o++],n[e]);return t},z=Wt.document,H=z&&z.documentElement,K=N("IE_PROTO"),Y=function(){},J="prototype",Z=function(){var t,n=o("iframe"),e=D.length;for(n.style.display="none",H.appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),Z=t.F;e--;)delete Z[J][D[e]];return Z()},cn=Object.create||function(t,n){var e;return null!==t?(Y[J]=v(t),e=new Y,Y[J]=null,e[K]=t):e=Z(),void 0===n?e:W(e,n)},X=D.concat("length","prototype"),fn={f:Object.getOwnPropertyNames||function(t){return C(t,X)}},$=fn.f,Q={}.toString,tt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],nt={f:function(t){return tt&&"[object Window]"==Q.call(t)?function(t){try{return $(t)}catch(t){return tt.slice()}}(t):$(P(t))}},et=Object.getOwnPropertyDescriptor,sn={f:Kt?et:function(t,n){if(t=P(t),n=Jt(n,!0),u)try{return et(t,n)}catch(t){}if(zt(t,n))return Xt(!G.f.call(t,n),t[n])}},rt=m.KEY,it=sn.f,ot=Zt.f,ut=nt.f,at=Wt.Symbol,ct=Wt.JSON,ft=ct&&ct.stringify,st="prototype",lt=en("_hidden"),ht=en("toPrimitive"),pt={}.propertyIsEnumerable,vt=l("symbol-registry"),dt=l("symbols"),yt=l("op-symbols"),gt=Object[st],mt="function"==typeof at,bt=Wt.QObject,_t=!bt||!bt[st]||!bt[st].findChild,wt=Kt&&Ht(function(){return 7!=cn(ot({},"a",{get:function(){return ot(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=it(gt,n);r&&delete gt[n],ot(t,n,e),r&&t!==gt&&ot(gt,n,r)}:ot,St=function(t){var n=dt[t]=cn(at[st]);return n._k=t,n},Et=mt&&"symbol"==typeof at.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof at},xt=function(t,n,e){return t===gt&&xt(yt,n,e),v(t),n=Jt(n,!0),v(e),zt(dt,n)?(e.enumerable?(zt(t,lt)&&t[lt][n]&&(t[lt][n]=!1),e=cn(e,{enumerable:Xt(0,!1)})):(zt(t,lt)||ot(t,lt,Xt(1,{})),t[lt][n]=!0),wt(t,n,e)):ot(t,n,e)},Ot=function(t,n){v(t);for(var e,r=function(t){var n=U(t),e=B.f;if(e)for(var r,i=e(t),o=G.f,u=0;i.length>u;)o.call(t,r=i[u++])&&n.push(r);return n}(n=P(n)),i=0,o=r.length;i<o;)xt(t,e=r[i++],n[e]);return t},At=function(t){var n=pt.call(this,t=Jt(t,!0));return!(this===gt&&zt(dt,t)&&!zt(yt,t))&&(!(n||!zt(this,t)||!zt(dt,t)||zt(this,lt)&&this[lt][t])||n)},Pt=function(t,n){if(t=P(t),n=Jt(n,!0),t!==gt||!zt(dt,n)||zt(yt,n)){var e=it(t,n);return!e||!zt(dt,n)||zt(t,lt)&&t[lt][n]||(e.enumerable=!0),e}},Mt=function(t){for(var n,e=ut(P(t)),r=[],i=0;e.length>i;)zt(dt,n=e[i++])||n==lt||n==rt||r.push(n);return r},Ft=function(t){for(var n,e=t===gt,r=ut(e?yt:P(t)),i=[],o=0;r.length>o;)!zt(dt,n=r[o++])||e&&!zt(gt,n)||i.push(dt[n]);return i};mt||(b((at=function(){if(this instanceof at)throw TypeError("Symbol is not a constructor!");var n=Qt(0<arguments.length?arguments[0]:void 0),e=function(t){this===gt&&e.call(yt,t),zt(this,lt)&&zt(this[lt],n)&&(this[lt][n]=!1),wt(this,n,Xt(1,t))};return Kt&&_t&&wt(gt,n,{configurable:!0,set:e}),St(n)})[st],"toString",function(){return this._k}),sn.f=Pt,Zt.f=xt,fn.f=nt.f=Mt,G.f=At,B.f=Ft,Kt&&b(gt,"propertyIsEnumerable",At,!0),_.f=function(t){return St(en(t))}),nn(nn.G+nn.W+nn.F*!mt,{Symbol:at});for(var jt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),Tt=0;jt.length>Tt;)en(jt[Tt++]);for(var It=U(en.store),Lt=0;It.length>Lt;)S(It[Lt++]);nn(nn.S+nn.F*!mt,"Symbol",{for:function(t){return zt(vt,t+="")?vt[t]:vt[t]=at(t)},keyFor:function(t){if(!Et(t))throw TypeError(t+" is not a symbol!");for(var n in vt)if(vt[n]===t)return n},useSetter:function(){_t=!0},useSimple:function(){_t=!1}}),nn(nn.S+nn.F*!mt,"Object",{create:function(t,n){return void 0===n?cn(t):Ot(cn(t),n)},defineProperty:xt,defineProperties:Ot,getOwnPropertyDescriptor:Pt,getOwnPropertyNames:Mt,getOwnPropertySymbols:Ft}),ct&&nn(nn.S+nn.F*(!mt||Ht(function(){var t=at();return"[null]"!=ft([t])||"{}"!=ft({a:t})||"{}"!=ft(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(Yt(n)||void 0!==t)&&!Et(t))return q(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!Et(n))return n}),r[1]=n,ft.apply(ct,r)}}),at[st][ht]||$t(at[st],ht,at[st].valueOf),V(at,"Symbol"),V(Math,"Math",!0),V(Wt.JSON,"JSON",!0),nn(nn.S,"Object",{create:cn}),nn(nn.S+nn.F*!Kt,"Object",{defineProperty:Zt.f}),nn(nn.S+nn.F*!Kt,"Object",{defineProperties:W});var Nt=function(t,n){var e=(d.Object||{})[t]||Object[t],r={};r[t]=n(e),nn(nn.S+nn.F*Ht(function(){e(1)}),"Object",r)},Rt=sn.f;Nt("getOwnPropertyDescriptor",function(){return function(t,n){return Rt(P(t),n)}});var ln=function(t){return Object(A(t))},kt=N("IE_PROTO"),Ct=Object.prototype,hn=Object.getPrototypeOf||function(t){return t=ln(t),zt(t,kt)?t[kt]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?Ct:null};Nt("getPrototypeOf",function(){return function(t){return hn(ln(t))}}),Nt("keys",function(){return function(t){return U(ln(t))}}),Nt("getOwnPropertyNames",function(){return nt.f});var Dt=m.onFreeze;Nt("freeze",function(n){return function(t){return n&&Yt(t)?n(Dt(t)):t}});var Ut=m.onFreeze;Nt("seal",function(n){return function(t){return n&&Yt(t)?n(Ut(t)):t}});var Bt=m.onFreeze;Nt("preventExtensions",function(n){return function(t){return n&&Yt(t)?n(Bt(t)):t}}),Nt("isFrozen",function(n){return function(t){return!Yt(t)||!!n&&n(t)}}),Nt("isSealed",function(n){return function(t){return!Yt(t)||!!n&&n(t)}}),Nt("isExtensible",function(n){return function(t){return!!Yt(t)&&(!n||n(t))}});var Vt=Object.assign,Gt=!Vt||Ht(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=Vt({},t)[e]||Object.keys(Vt({},n)).join("")!=r})?function(t,n){for(var e=ln(t),r=arguments.length,i=1,o=B.f,u=G.f;i<r;)for(var a,c=O(arguments[i++]),f=o?U(c).concat(o(c)):U(c),s=f.length,l=0;l<s;)u.call(c,a=f[l++])&&(e[a]=c[a]);return e}:Vt;nn(nn.S+nn.F,"Object",{assign:Gt});var qt=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n};nn(nn.S,"Object",{is:qt});var pn=function(t,n){if(v(t),!Yt(n)&&null!==n)throw TypeError(n+": can't set as prototype!")},vn={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=tn(Function.call,sn.f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return pn(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:pn};nn(nn.S,"Object",{setPrototypeOf:vn.set});var dn=en("toStringTag"),yn="Arguments"==x(function(){return arguments}()),gn=function(t){var n,e,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),dn))?e:yn?x(n):"Object"==(r=x(n))&&"function"==typeof n.callee?"Arguments":r},mn={};mn[en("toStringTag")]="z",mn+""!="[object z]"&&b(Object.prototype,"toString",function(){return"[object "+gn(this)+"]"},!0);var bn=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)},_n=[].slice,wn={},Sn=Function.bind||function(n){var e=s(this),r=_n.call(arguments,1),i=function(){var t=r.concat(_n.call(arguments));return this instanceof i?function(t,n,e){if(!(n in wn)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";wn[n]=Function("F,a","return new F("+r.join(",")+")")}return wn[n](t,e)}(e,t.length,t):bn(e,t,n)};return Yt(e.prototype)&&(i.prototype=e.prototype),i};nn(nn.P,"Function",{bind:Sn});var En=Zt.f,xn=Function.prototype,On=/^\s*function ([^ (]*)/;"name"in xn||Kt&&En(xn,"name",{configurable:!0,get:function(){try{return(""+this).match(On)[1]}catch(t){return""}}});var An=en("hasInstance"),Pn=Function.prototype;An in Pn||Zt.f(Pn,An,{value:function(t){if("function"!=typeof this||!Yt(t))return!1;if(!Yt(this.prototype))return t instanceof this;for(;t=hn(t);)if(this.prototype===t)return!0;return!1}});var Mn="\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff",Fn="["+Mn+"]",jn=RegExp("^"+Fn+Fn+"*"),Tn=RegExp(Fn+Fn+"*$"),In=function(t,n,e){var r={},i=Ht(function(){return!!Mn[t]()||"âÂ"!="âÂ"[t]()}),o=r[t]=i?n(Ln):Mn[t];e&&(r[e]=o),nn(nn.P+nn.F*i,"String",r)},Ln=In.trim=function(t,n){return t=String(A(t)),1&n&&(t=t.replace(jn,"")),2&n&&(t=t.replace(Tn,"")),t},Nn=In,Rn=Wt.parseInt,kn=Nn.trim,Cn=/^[-+]?0[xX]/,Dn=8!==Rn(Mn+"08")||22!==Rn(Mn+"0x16")?function(t,n){var e=kn(String(t),3);return Rn(e,n>>>0||(Cn.test(e)?16:10))}:Rn;nn(nn.G+nn.F*(parseInt!=Dn),{parseInt:Dn});var Un=Wt.parseFloat,Bn=Nn.trim,Vn=1/Un(Mn+"-0")!=-1/0?function(t){var n=Bn(String(t),3),e=Un(n);return 0===e&&"-"==n.charAt(0)?-0:e}:Un;nn(nn.G+nn.F*(parseFloat!=Vn),{parseFloat:Vn});var Gn=vn.set,qn=function(t,n,e){var r,i=n.constructor;return i!==e&&"function"==typeof i&&(r=i.prototype)!==e.prototype&&Yt(r)&&Gn&&Gn(t,r),t},Wn=fn.f,zn=sn.f,Hn=Zt.f,Kn=Nn.trim,Yn="Number",Jn=Wt[Yn],Zn=Jn,Xn=Jn.prototype,$n=x(cn(Xn))==Yn,Qn="trim"in String.prototype,te=function(t){var n=Jt(t,!1);if("string"==typeof n&&2<n.length){var e,r,i,o=(n=Qn?n.trim():Kn(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var u,a=n.slice(2),c=0,f=a.length;c<f;c++)if((u=a.charCodeAt(c))<48||i<u)return NaN;return parseInt(a,r)}}return+n};if(!Jn(" 0o1")||!Jn("0b1")||Jn("+0x1")){Jn=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof Jn&&($n?Ht(function(){Xn.valueOf.call(e)}):x(e)!=Yn)?qn(new Zn(te(n)),e,Jn):te(n)};for(var ne,ee=Kt?Wn(Zn):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),re=0;ee.length>re;re++)zt(Zn,ne=ee[re])&&!zt(Jn,ne)&&Hn(Jn,ne,zn(Zn,ne));(Jn.prototype=Xn).constructor=Jn,b(Wt,Yn,Jn)}var ie=function(t,n){if("number"!=typeof t&&"Number"!=x(t))throw TypeError(n);return+t},oe=function(t){var n=String(A(this)),e="",r=rn(t);if(r<0||r==1/0)throw RangeError("Count can't be negative");for(;0<r;(r>>>=1)&&(n+=n))1&r&&(e+=n);return e},ue=1..toFixed,ae=Math.floor,ce=[0,0,0,0,0,0],fe="Number.toFixed: incorrect invocation!",se=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*ce[e],ce[e]=r%1e7,r=ae(r/1e7)},le=function(t){for(var n=6,e=0;0<=--n;)e+=ce[n],ce[n]=ae(e/t),e=e%t*1e7},he=function(){for(var t=6,n="";0<=--t;)if(""!==n||0===t||0!==ce[t]){var e=String(ce[t]);n=""===n?e:n+oe.call("0",7-e.length)+e}return n},pe=function(t,n,e){return 0===n?e:n%2==1?pe(t,n-1,e*t):pe(t*t,n/2,e)};nn(nn.P+nn.F*(!!ue&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!Ht(function(){ue.call({})})),"Number",{toFixed:function(t){var n,e,r,i,o=ie(this,fe),u=rn(t),a="",c="0";if(u<0||20<u)throw RangeError(fe);if(o!=o)return"NaN";if(o<=-1e21||1e21<=o)return String(o);if(o<0&&(a="-",o=-o),1e-21<o)if(e=(n=function(t){for(var n=0,e=t;4096<=e;)n+=12,e/=4096;for(;2<=e;)n+=1,e/=2;return n}(o*pe(2,69,1))-69)<0?o*pe(2,-n,1):o/pe(2,n,1),e*=4503599627370496,0<(n=52-n)){for(se(0,e),r=u;7<=r;)se(1e7,0),r-=7;for(se(pe(10,r,1),0),r=n-1;23<=r;)le(1<<23),r-=23;le(1<<r),se(1,1),le(2),c=he()}else se(0,e),se(1<<-n,0),c=he()+oe.call("0",u);return c=0<u?a+((i=c.length)<=u?"0."+oe.call("0",u-i)+c:c.slice(0,i-u)+"."+c.slice(i-u)):a+c}});var ve=1..toPrecision;nn(nn.P+nn.F*(Ht(function(){return"1"!==ve.call(1,void 0)})||!Ht(function(){ve.call({})})),"Number",{toPrecision:function(t){var n=ie(this,"Number#toPrecision: incorrect invocation!");return void 0===t?ve.call(n):ve.call(n,t)}}),nn(nn.S,"Number",{EPSILON:Math.pow(2,-52)});var de=Wt.isFinite;nn(nn.S,"Number",{isFinite:function(t){return"number"==typeof t&&de(t)}});var ye=Math.floor,ge=function(t){return!Yt(t)&&isFinite(t)&&ye(t)===t};nn(nn.S,"Number",{isInteger:ge}),nn(nn.S,"Number",{isNaN:function(t){return t!=t}});var me=Math.abs;nn(nn.S,"Number",{isSafeInteger:function(t){return ge(t)&&me(t)<=9007199254740991}}),nn(nn.S,"Number",{MAX_SAFE_INTEGER:9007199254740991}),nn(nn.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991}),nn(nn.S+nn.F*(Number.parseFloat!=Vn),"Number",{parseFloat:Vn}),nn(nn.S+nn.F*(Number.parseInt!=Dn),"Number",{parseInt:Dn});var be=Math.log1p||function(t){return-1e-8<(t=+t)&&t<1e-8?t-t*t/2:Math.log(1+t)},_e=Math.sqrt,we=Math.acosh;nn(nn.S+nn.F*!(we&&710==Math.floor(we(Number.MAX_VALUE))&&we(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:94906265.62425156<t?Math.log(t)+Math.LN2:be(t-1+_e(t-1)*_e(t+1))}});var Se=Math.asinh;nn(nn.S+nn.F*!(Se&&0<1/Se(0)),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}});var Ee=Math.atanh;nn(nn.S+nn.F*!(Ee&&1/Ee(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}});var xe=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1};nn(nn.S,"Math",{cbrt:function(t){return xe(t=+t)*Math.pow(Math.abs(t),1/3)}}),nn(nn.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}});var Oe=Math.exp;nn(nn.S,"Math",{cosh:function(t){return(Oe(t=+t)+Oe(-t))/2}});var Ae=Math.expm1,Pe=!Ae||22025.465794806718<Ae(10)||Ae(10)<22025.465794806718||-2e-17!=Ae(-2e-17)?function(t){return 0==(t=+t)?t:-1e-6<t&&t<1e-6?t+t*t/2:Math.exp(t)-1}:Ae;nn(nn.S+nn.F*(Pe!=Math.expm1),"Math",{expm1:Pe});var Me=Math.pow,Fe=Me(2,-52),je=Me(2,-23),Te=Me(2,127)*(2-je),Ie=Me(2,-126),Le=Math.fround||function(t){var n,e,r=Math.abs(t),i=xe(t);return r<Ie?i*(r/Ie/je+1/Fe-1/Fe)*Ie*je:Te<(e=(n=(1+je/Fe)*r)-(n-r))||e!=e?i*(1/0):i*e};nn(nn.S,"Math",{fround:Le});var Ne=Math.abs;nn(nn.S,"Math",{hypot:function(t,n){for(var e,r,i=0,o=0,u=arguments.length,a=0;o<u;)a<(e=Ne(arguments[o++]))?(i=i*(r=a/e)*r+1,a=e):i+=0<e?(r=e/a)*r:e;return a===1/0?1/0:a*Math.sqrt(i)}});var Re=Math.imul;nn(nn.S+nn.F*Ht(function(){return-5!=Re(4294967295,5)||2!=Re.length}),"Math",{imul:function(t,n){var e=65535,r=+t,i=+n,o=e&r,u=e&i;return 0|o*u+((e&r>>>16)*u+o*(e&i>>>16)<<16>>>0)}}),nn(nn.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}}),nn(nn.S,"Math",{log1p:be}),nn(nn.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}}),nn(nn.S,"Math",{sign:xe});var ke=Math.exp;nn(nn.S+nn.F*Ht(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(Pe(t)-Pe(-t))/2:(ke(t-1)-ke(-t-1))*(Math.E/2)}});var Ce=Math.exp;nn(nn.S,"Math",{tanh:function(t){var n=Pe(t=+t),e=Pe(-t);return n==1/0?1:e==1/0?-1:(n-e)/(Ce(t)+Ce(-t))}}),nn(nn.S,"Math",{trunc:function(t){return(0<t?Math.floor:Math.ceil)(t)}});var De=String.fromCharCode,Ue=String.fromCodePoint;nn(nn.S+nn.F*(!!Ue&&1!=Ue.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,i=0;i<r;){if(n=+arguments[i++],un(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?De(n):De(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}}),nn(nn.S,"String",{raw:function(t){for(var n=P(t.raw),e=on(n.length),r=arguments.length,i=[],o=0;o<e;)i.push(String(n[o++])),o<r&&i.push(String(arguments[o]));return i.join("")}}),Nn("trim",function(t){return function(){return t(this,3)}});var Be=function(a){return function(t,n){var e,r,i=String(A(t)),o=rn(n),u=i.length;return o<0||u<=o?a?"":void 0:(e=i.charCodeAt(o))<55296||56319<e||o+1===u||(r=i.charCodeAt(o+1))<56320||57343<r?a?i.charAt(o):e:a?i.slice(o,o+2):r-56320+(e-55296<<10)+65536}},Ve={},Ge={};$t(Ge,en("iterator"),function(){return this});var qe=function(t,n,e){t.prototype=cn(Ge,{next:Xt(1,e)}),V(t,n+" Iterator")},We=en("iterator"),ze=!([].keys&&"next"in[].keys()),He="values",Ke=function(){return this},Ye=function(t,n,e,r,i,o,u){qe(e,n,r);var a,c,f,s=function(t){if(!ze&&t in v)return v[t];switch(t){case"keys":case He:return function(){return new e(this,t)}}return function(){return new e(this,t)}},l=n+" Iterator",h=i==He,p=!1,v=t.prototype,d=v[We]||v["@@iterator"]||i&&v[i],y=d||s(i),g=i?h?s("entries"):y:void 0,m="Array"==n&&v.entries||d;if(m&&(f=hn(m.call(new t)))!==Object.prototype&&f.next&&(V(f,l,!0),"function"!=typeof f[We]&&$t(f,We,Ke)),h&&d&&d.name!==He&&(p=!0,y=function(){return d.call(this)}),(ze||p||!v[We])&&$t(v,We,y),Ve[n]=y,Ve[l]=Ke,i)if(a={values:h?y:s(He),keys:o?y:s("keys"),entries:g},u)for(c in a)c in v||b(v,c,a[c]);else nn(nn.P+nn.F*(ze||p),n,a);return a},Je=Be(!0);Ye(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=Je(n,e),this._i+=t.length,{value:t,done:!1})});var Ze=Be(!1);nn(nn.P,"String",{codePointAt:function(t){return Ze(this,t)}});var Xe=en("match"),$e=function(t){var n;return Yt(t)&&(void 0!==(n=t[Xe])?!!n:"RegExp"==x(t))},Qe=function(t,n,e){if($e(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(A(t))},tr=en("match"),nr=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[tr]=!1,!"/./"[n](e)}catch(t){}}return!0},er="endsWith",rr=""[er];nn(nn.P+nn.F*nr(er),"String",{endsWith:function(t){var n=Qe(this,t,er),e=1<arguments.length?arguments[1]:void 0,r=on(n.length),i=void 0===e?r:Math.min(on(e),r),o=String(t);return rr?rr.call(n,o,i):n.slice(i-o.length,i)===o}});var ir="includes";nn(nn.P+nn.F*nr(ir),"String",{includes:function(t){return!!~Qe(this,t,ir).indexOf(t,1<arguments.length?arguments[1]:void 0)}}),nn(nn.P,"String",{repeat:oe});var or="startsWith",ur=""[or];nn(nn.P+nn.F*nr(or),"String",{startsWith:function(t){var n=Qe(this,t,or),e=on(Math.min(1<arguments.length?arguments[1]:void 0,n.length)),r=String(t);return ur?ur.call(n,r,e):n.slice(e,e+r.length)===r}});var ar=/"/g,cr=function(t,n,e,r){var i=String(A(t)),o="<"+n;return""!==e&&(o+=" "+e+'="'+String(r).replace(ar,"&quot;")+'"'),o+">"+i+"</"+n+">"},fr=function(n,t){var e={};e[n]=t(cr),nn(nn.P+nn.F*Ht(function(){var t=""[n]('"');return t!==t.toLowerCase()||3<t.split('"').length}),"String",e)};fr("anchor",function(n){return function(t){return n(this,"a","name",t)}}),fr("big",function(t){return function(){return t(this,"big","","")}}),fr("blink",function(t){return function(){return t(this,"blink","","")}}),fr("bold",function(t){return function(){return t(this,"b","","")}}),fr("fixed",function(t){return function(){return t(this,"tt","","")}}),fr("fontcolor",function(n){return function(t){return n(this,"font","color",t)}}),fr("fontsize",function(n){return function(t){return n(this,"font","size",t)}}),fr("italics",function(t){return function(){return t(this,"i","","")}}),fr("link",function(n){return function(t){return n(this,"a","href",t)}}),fr("small",function(t){return function(){return t(this,"small","","")}}),fr("strike",function(t){return function(){return t(this,"strike","","")}}),fr("sub",function(t){return function(){return t(this,"sub","","")}}),fr("sup",function(t){return function(){return t(this,"sup","","")}}),nn(nn.S,"Date",{now:function(){return(new Date).getTime()}}),nn(nn.P+nn.F*Ht(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=ln(this),e=Jt(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}});var sr=Date.prototype.getTime,lr=Date.prototype.toISOString,hr=function(t){return 9<t?t:"0"+t},pr=Ht(function(){return"0385-07-25T07:06:39.999Z"!=lr.call(new Date(-5e13-1))})||!Ht(function(){lr.call(new Date(NaN))})?function(){if(!isFinite(sr.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":9999<n?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+hr(t.getUTCMonth()+1)+"-"+hr(t.getUTCDate())+"T"+hr(t.getUTCHours())+":"+hr(t.getUTCMinutes())+":"+hr(t.getUTCSeconds())+"."+(99<e?e:"0"+hr(e))+"Z"}:lr;nn(nn.P+nn.F*(Date.prototype.toISOString!==pr),"Date",{toISOString:pr});var vr=Date.prototype,dr="Invalid Date",yr="toString",gr=vr[yr],mr=vr.getTime;new Date(NaN)+""!=dr&&b(vr,yr,function(){var t=mr.call(this);return t==t?gr.call(this):dr});var br=en("toPrimitive"),_r=Date.prototype;br in _r||$t(_r,br,function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return Jt(v(this),"number"!=t)}),nn(nn.S,"Array",{isArray:q});var wr=function(n,t,e,r){try{return r?t(v(e)[0],e[1]):t(e)}catch(t){var i=n.return;throw void 0!==i&&v(i.call(n)),t}},Sr=en("iterator"),Er=Array.prototype,xr=function(t){return void 0!==t&&(Ve.Array===t||Er[Sr]===t)},Or=function(t,n,e){n in t?Zt.f(t,n,Xt(0,e)):t[n]=e},Ar=en("iterator"),Pr=d.getIteratorMethod=function(t){if(null!=t)return t[Ar]||t["@@iterator"]||Ve[gn(t)]},Mr=en("iterator"),Fr=!1;try{[7][Mr]().return=function(){Fr=!0}}catch(t){}var jr=function(t,n){if(!n&&!Fr)return!1;var e=!1;try{var r=[7],i=r[Mr]();i.next=function(){return{done:e=!0}},r[Mr]=function(){return i},t(r)}catch(t){}return e};nn(nn.S+nn.F*!jr(function(t){}),"Array",{from:function(t){var n,e,r,i,o=ln(t),u="function"==typeof this?this:Array,a=arguments.length,c=1<a?arguments[1]:void 0,f=void 0!==c,s=0,l=Pr(o);if(f&&(c=tn(c,2<a?arguments[2]:void 0,2)),null==l||u==Array&&xr(l))for(e=new u(n=on(o.length));s<n;s++)Or(e,s,f?c(o[s],s):o[s]);else for(i=l.call(o),e=new u;!(r=i.next()).done;s++)Or(e,s,f?wr(i,c,[r.value,s],!0):r.value);return e.length=s,e}}),nn(nn.S+nn.F*Ht(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);t<n;)Or(e,t,arguments[t++]);return e.length=n,e}});var Tr=function(t,n){return!!t&&Ht(function(){n?t.call(null,function(){},1):t.call(null)})},Ir=[].join;nn(nn.P+nn.F*(O!=Object||!Tr(Ir)),"Array",{join:function(t){return Ir.call(P(this),void 0===t?",":t)}});var Lr=[].slice;nn(nn.P+nn.F*Ht(function(){H&&Lr.call(H)}),"Array",{slice:function(t,n){var e=on(this.length),r=x(this);if(n=void 0===n?e:n,"Array"==r)return Lr.call(this,t,n);for(var i=un(t,e),o=un(n,e),u=on(o-i),a=new Array(u),c=0;c<u;c++)a[c]="String"==r?this.charAt(i+c):this[i+c];return a}});var Nr=[].sort,Rr=[1,2,3];nn(nn.P+nn.F*(Ht(function(){Rr.sort(void 0)})||!Ht(function(){Rr.sort(null)})||!Tr(Nr)),"Array",{sort:function(t){return void 0===t?Nr.call(ln(this)):Nr.call(ln(this),s(t))}});var kr=en("species"),Cr=function(t,n){return q(e=t)&&("function"!=typeof(r=e.constructor)||r!==Array&&!q(r.prototype)||(r=void 0),Yt(r)&&null===(r=r[kr])&&(r=void 0)),new(void 0===r?Array:r)(n);var e,r},Dr=function(l,t){var h=1==l,p=2==l,v=3==l,d=4==l,y=6==l,g=5==l||y,m=t||Cr;return function(t,n,e){for(var r,i,o=ln(t),u=O(o),a=tn(n,e,3),c=on(u.length),f=0,s=h?m(t,c):p?m(t,0):void 0;f<c;f++)if((g||f in u)&&(i=a(r=u[f],f,o),l))if(h)s[f]=i;else if(i)switch(l){case 3:return!0;case 5:return r;case 6:return f;case 2:s.push(r)}else if(d)return!1;return y?-1:v||d?d:s}},Ur=Dr(0),Br=Tr([].forEach,!0);nn(nn.P+nn.F*!Br,"Array",{forEach:function(t){return Ur(this,t,arguments[1])}});var Vr=Dr(1);nn(nn.P+nn.F*!Tr([].map,!0),"Array",{map:function(t){return Vr(this,t,arguments[1])}});var Gr=Dr(2);nn(nn.P+nn.F*!Tr([].filter,!0),"Array",{filter:function(t){return Gr(this,t,arguments[1])}});var qr=Dr(3);nn(nn.P+nn.F*!Tr([].some,!0),"Array",{some:function(t){return qr(this,t,arguments[1])}});var Wr=Dr(4);nn(nn.P+nn.F*!Tr([].every,!0),"Array",{every:function(t){return Wr(this,t,arguments[1])}});var zr=function(t,n,e,r,i){s(n);var o=ln(t),u=O(o),a=on(o.length),c=i?a-1:0,f=i?-1:1;if(e<2)for(;;){if(c in u){r=u[c],c+=f;break}if(c+=f,i?c<0:a<=c)throw TypeError("Reduce of empty array with no initial value")}for(;i?0<=c:c<a;c+=f)c in u&&(r=n(r,u[c],c,o));return r};nn(nn.P+nn.F*!Tr([].reduce,!0),"Array",{reduce:function(t){return zr(this,t,arguments.length,arguments[1],!1)}}),nn(nn.P+nn.F*!Tr([].reduceRight,!0),"Array",{reduceRight:function(t){return zr(this,t,arguments.length,arguments[1],!0)}});var Hr=an(!1),Kr=[].indexOf,Yr=!!Kr&&1/[1].indexOf(1,-0)<0;nn(nn.P+nn.F*(Yr||!Tr(Kr)),"Array",{indexOf:function(t){return Yr?Kr.apply(this,arguments)||0:Hr(this,t,arguments[1])}});var Jr=[].lastIndexOf,Zr=!!Jr&&1/[1].lastIndexOf(1,-0)<0;nn(nn.P+nn.F*(Zr||!Tr(Jr)),"Array",{lastIndexOf:function(t){if(Zr)return Jr.apply(this,arguments)||0;var n=P(this),e=on(n.length),r=e-1;for(1<arguments.length&&(r=Math.min(r,rn(arguments[1]))),r<0&&(r=e+r);0<=r;r--)if(r in n&&n[r]===t)return r||0;return-1}});var Xr=[].copyWithin||function(t,n){var e=ln(this),r=on(e.length),i=un(t,r),o=un(n,r),u=2<arguments.length?arguments[2]:void 0,a=Math.min((void 0===u?r:un(u,r))-o,r-i),c=1;for(o<i&&i<o+a&&(c=-1,o+=a-1,i+=a-1);0<a--;)o in e?e[i]=e[o]:delete e[i],i+=c,o+=c;return e},$r=en("unscopables"),Qr=Array.prototype;null==Qr[$r]&&$t(Qr,$r,{});var ti=function(t){Qr[$r][t]=!0};nn(nn.P,"Array",{copyWithin:Xr}),ti("copyWithin");var ni=function(t){for(var n=ln(this),e=on(n.length),r=arguments.length,i=un(1<r?arguments[1]:void 0,e),o=2<r?arguments[2]:void 0,u=void 0===o?e:un(o,e);i<u;)n[i++]=t;return n};nn(nn.P,"Array",{fill:ni}),ti("fill");var ei=Dr(5),ri="find",ii=!0;ri in[]&&Array(1)[ri](function(){ii=!1}),nn(nn.P+nn.F*ii,"Array",{find:function(t){return ei(this,t,1<arguments.length?arguments[1]:void 0)}}),ti(ri);var oi=Dr(6),ui="findIndex",ai=!0;ui in[]&&Array(1)[ui](function(){ai=!1}),nn(nn.P+nn.F*ai,"Array",{findIndex:function(t){return oi(this,t,1<arguments.length?arguments[1]:void 0)}}),ti(ui);var ci=en("species"),fi=function(t){var n=Wt[t];Kt&&n&&!n[ci]&&Zt.f(n,ci,{configurable:!0,get:function(){return this}})};fi("Array");var si=function(t,n){return{value:n,done:!!t}},li=Ye(Array,"Array",function(t,n){this._t=P(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,si(1)):si(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values");Ve.Arguments=Ve.Array,ti("keys"),ti("values"),ti("entries");var hi=function(){var t=v(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n},pi=Zt.f,vi=fn.f,di=Wt.RegExp,yi=di,gi=di.prototype,mi=/a/g,bi=/a/g,_i=new di(mi)!==mi;if(Kt&&(!_i||Ht(function(){return bi[en("match")]=!1,di(mi)!=mi||di(bi)==bi||"/a/i"!=di(mi,"i")}))){di=function(t,n){var e=this instanceof di,r=$e(t),i=void 0===n;return!e&&r&&t.constructor===di&&i?t:qn(_i?new yi(r&&!i?t.source:t,n):yi((r=t instanceof di)?t.source:t,r&&i?hi.call(t):n),e?this:gi,di)};for(var wi=function(n){n in di||pi(di,n,{configurable:!0,get:function(){return yi[n]},set:function(t){yi[n]=t}})},Si=vi(yi),Ei=0;Si.length>Ei;)wi(Si[Ei++]);(gi.constructor=di).prototype=gi,b(Wt,"RegExp",di)}fi("RegExp"),Kt&&"g"!=/./g.flags&&Zt.f(RegExp.prototype,"flags",{configurable:!0,get:hi});var xi="toString",Oi=/./[xi],Ai=function(t){b(RegExp.prototype,xi,t,!0)};Ht(function(){return"/a/b"!=Oi.call({source:"a",flags:"b"})})?Ai(function(){var t=v(this);return"/".concat(t.source,"/","flags"in t?t.flags:!Kt&&t instanceof RegExp?hi.call(t):void 0)}):Oi.name!=xi&&Ai(function(){return Oi.call(this)});var Pi=function(n,t,e){var r=en(n),i=e(A,r,""[n]),o=i[0],u=i[1];Ht(function(){var t={};return t[r]=function(){return 7},7!=""[n](t)})&&(b(String.prototype,n,o),$t(RegExp.prototype,r,2==t?function(t,n){return u.call(t,this,n)}:function(t){return u.call(t,this)}))};Pi("match",1,function(r,i,t){return[function(t){var n=r(this),e=null==t?void 0:t[i];return void 0!==e?e.call(t,n):new RegExp(t)[i](String(n))},t]}),Pi("replace",2,function(i,o,u){return[function(t,n){var e=i(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,e,n):u.call(String(e),t,n)},u]}),Pi("search",1,function(r,i,t){return[function(t){var n=r(this),e=null==t?void 0:t[i];return void 0!==e?e.call(t,n):new RegExp(t)[i](String(n))},t]}),Pi("split",2,function(i,o,u){var p=$e,v=u,d=[].push,t="split",y="length",g="lastIndex";if("c"=="abbc"[t](/(b)*/)[1]||4!="test"[t](/(?:)/,-1)[y]||2!="ab"[t](/(?:ab)*/)[y]||4!="."[t](/(.?)(.?)/)[y]||1<"."[t](/()()/)[y]||""[t](/.?/)[y]){var m=void 0===/()??/.exec("")[1];u=function(t,n){var e=String(this);if(void 0===t&&0===n)return[];if(!p(t))return v.call(e,t,n);var r,i,o,u,a,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),s=0,l=void 0===n?4294967295:n>>>0,h=new RegExp(t.source,f+"g");for(m||(r=new RegExp("^"+h.source+"$(?!\\s)",f));(i=h.exec(e))&&!(s<(o=i.index+i[0][y])&&(c.push(e.slice(s,i.index)),!m&&1<i[y]&&i[0].replace(r,function(){for(a=1;a<arguments[y]-2;a++)void 0===arguments[a]&&(i[a]=void 0)}),1<i[y]&&i.index<e[y]&&d.apply(c,i.slice(1)),u=i[0][y],s=o,c[y]>=l));)h[g]===i.index&&h[g]++;return s===e[y]?!u&&h.test("")||c.push(""):c.push(e.slice(s)),c[y]>l?c.slice(0,l):c}}else"0"[t](void 0,0)[y]&&(u=function(t,n){return void 0===t&&0===n?[]:v.call(this,t,n)});return[function(t,n){var e=i(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,e,n):u.call(String(e),t,n)},u]});var Mi,Fi,ji,Ti=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t},Ii=n(function(t){var h={},p={},n=t.exports=function(t,n,e,r,i){var o,u,a,c,f=i?function(){return t}:Pr(t),s=tn(e,r,n?2:1),l=0;if("function"!=typeof f)throw TypeError(t+" is not iterable!");if(xr(f)){for(o=on(t.length);l<o;l++)if((c=n?s(v(u=t[l])[0],u[1]):s(t[l]))===h||c===p)return c}else for(a=f.call(t);!(u=a.next()).done;)if((c=wr(a,s,u.value,n))===h||c===p)return c};n.BREAK=h,n.RETURN=p}),Li=en("species"),Ni=function(t,n){var e,r=v(t).constructor;return void 0===r||null==(e=v(r)[Li])?n:s(e)},Ri=Wt.process,ki=Wt.setImmediate,Ci=Wt.clearImmediate,Di=Wt.MessageChannel,Ui=Wt.Dispatch,Bi=0,Vi={},Gi="onreadystatechange",qi=function(){var t=+this;if(Vi.hasOwnProperty(t)){var n=Vi[t];delete Vi[t],n()}},Wi=function(t){qi.call(t.data)};ki&&Ci||(ki=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return Vi[++Bi]=function(){bn("function"==typeof t?t:Function(t),n)},Mi(Bi),Bi},Ci=function(t){delete Vi[t]},"process"==x(Ri)?Mi=function(t){Ri.nextTick(tn(qi,t,1))}:Ui&&Ui.now?Mi=function(t){Ui.now(tn(qi,t,1))}:Di?(ji=(Fi=new Di).port2,Fi.port1.onmessage=Wi,Mi=tn(ji.postMessage,ji,1)):Wt.addEventListener&&"function"==typeof postMessage&&!Wt.importScripts?(Mi=function(t){Wt.postMessage(t+"","*")},Wt.addEventListener("message",Wi,!1)):Mi=Gi in o("script")?function(t){H.appendChild(o("script"))[Gi]=function(){H.removeChild(this),qi.call(t)}}:function(t){setTimeout(tn(qi,t,1),0)});var zi={set:ki,clear:Ci},Hi=zi.set,Ki=Wt.MutationObserver||Wt.WebKitMutationObserver,Yi=Wt.process,Ji=Wt.Promise,Zi="process"==x(Yi),Xi=function(){var e,r,i,t=function(){var t,n;for(Zi&&(t=Yi.domain)&&t.exit();e;){n=e.fn,e=e.next;try{n()}catch(t){throw e?i():r=void 0,t}}r=void 0,t&&t.enter()};if(Zi)i=function(){Yi.nextTick(t)};else if(!Ki||Wt.navigator&&Wt.navigator.standalone)if(Ji&&Ji.resolve){var n=Ji.resolve(void 0);i=function(){n.then(t)}}else i=function(){Hi.call(Wt,t)};else{var o=!0,u=document.createTextNode("");new Ki(t).observe(u,{characterData:!0}),i=function(){u.data=o=!o}}return function(t){var n={fn:t,next:void 0};r&&(r.next=n),e||(e=n,i()),r=n}};function $i(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=s(e),this.reject=s(r)}var Qi,to,no,eo,ro={f:function(t){return new $i(t)}},io=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}},oo=Wt.navigator,uo=oo&&oo.userAgent||"",ao=function(t,n){if(v(t),Yt(n)&&n.constructor===t)return n;var e=ro.f(t);return(0,e.resolve)(n),e.promise},co=function(t,n,e){for(var r in n)b(t,r,n[r],e);return t},fo=zi.set,so=Xi(),lo="Promise",ho=Wt.TypeError,po=Wt.process,vo=po&&po.versions,yo=vo&&vo.v8||"",go=Wt[lo],mo="process"==gn(po),bo=function(){},_o=to=ro.f,wo=!!function(){try{var t=go.resolve(1),n=(t.constructor={})[en("species")]=function(t){t(bo,bo)};return(mo||"function"==typeof PromiseRejectionEvent)&&t.then(bo)instanceof n&&0!==yo.indexOf("6.6")&&-1===uo.indexOf("Chrome/66")}catch(t){}}(),So=function(t){var n;return!(!Yt(t)||"function"!=typeof(n=t.then))&&n},Eo=function(s,e){if(!s._n){s._n=!0;var r=s._c;so(function(){for(var c=s._v,f=1==s._s,t=0,n=function(t){var n,e,r,i=f?t.ok:t.fail,o=t.resolve,u=t.reject,a=t.domain;try{i?(f||(2==s._h&&Ao(s),s._h=1),!0===i?n=c:(a&&a.enter(),n=i(c),a&&(a.exit(),r=!0)),n===t.promise?u(ho("Promise-chain cycle")):(e=So(n))?e.call(n,o,u):o(n)):u(c)}catch(t){a&&!r&&a.exit(),u(t)}};r.length>t;)n(r[t++]);s._c=[],s._n=!1,e&&!s._h&&xo(s)})}},xo=function(o){fo.call(Wt,function(){var t,n,e,r=o._v,i=Oo(o);if(i&&(t=io(function(){mo?po.emit("unhandledRejection",r,o):(n=Wt.onunhandledrejection)?n({promise:o,reason:r}):(e=Wt.console)&&e.error&&e.error("Unhandled promise rejection",r)}),o._h=mo||Oo(o)?2:1),o._a=void 0,i&&t.e)throw t.v})},Oo=function(t){return 1!==t._h&&0===(t._a||t._c).length},Ao=function(n){fo.call(Wt,function(){var t;mo?po.emit("rejectionHandled",n):(t=Wt.onrejectionhandled)&&t({promise:n,reason:n._v})})},Po=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),Eo(n,!0))},Mo=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw ho("Promise can't be resolved itself");(e=So(t))?so(function(){var n={_w:r,_d:!1};try{e.call(t,tn(Mo,n,1),tn(Po,n,1))}catch(t){Po.call(n,t)}}):(r._v=t,r._s=1,Eo(r,!1))}catch(t){Po.call({_w:r,_d:!1},t)}}};wo||(go=function(t){Ti(this,go,lo,"_h"),s(t),Qi.call(this);try{t(tn(Mo,this,1),tn(Po,this,1))}catch(t){Po.call(this,t)}},(Qi=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=co(go.prototype,{then:function(t,n){var e=_o(Ni(this,go));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=mo?po.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&Eo(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),no=function(){var t=new Qi;this.promise=t,this.resolve=tn(Mo,t,1),this.reject=tn(Po,t,1)},ro.f=_o=function(t){return t===go||t===eo?new no(t):to(t)}),nn(nn.G+nn.W+nn.F*!wo,{Promise:go}),V(go,lo),fi(lo),eo=d[lo],nn(nn.S+nn.F*!wo,lo,{reject:function(t){var n=_o(this);return(0,n.reject)(t),n.promise}}),nn(nn.S+nn.F*!wo,lo,{resolve:function(t){return ao(this,t)}}),nn(nn.S+nn.F*!(wo&&jr(function(t){go.all(t).catch(bo)})),lo,{all:function(t){var u=this,n=_o(u),a=n.resolve,c=n.reject,e=io(function(){var r=[],i=0,o=1;Ii(t,!1,function(t){var n=i++,e=!1;r.push(void 0),o++,u.resolve(t).then(function(t){e||(e=!0,r[n]=t,--o||a(r))},c)}),--o||a(r)});return e.e&&c(e.v),n.promise},race:function(t){var n=this,e=_o(n),r=e.reject,i=io(function(){Ii(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}});var Fo=function(t,n){if(!Yt(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t},jo=Zt.f,To=m.fastKey,Io=Kt?"_s":"size",Lo=function(t,n){var e,r=To(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e},No={getConstructor:function(t,o,e,r){var i=t(function(t,n){Ti(t,i,o,"_i"),t._t=o,t._i=cn(null),t._f=void 0,t._l=void 0,t[Io]=0,null!=n&&Ii(n,e,t[r],t)});return co(i.prototype,{clear:function(){for(var t=Fo(this,o),n=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete n[e.i];t._f=t._l=void 0,t[Io]=0},delete:function(t){var n=Fo(this,o),e=Lo(n,t);if(e){var r=e.n,i=e.p;delete n._i[e.i],e.r=!0,i&&(i.n=r),r&&(r.p=i),n._f==e&&(n._f=r),n._l==e&&(n._l=i),n[Io]--}return!!e},forEach:function(t){Fo(this,o);for(var n,e=tn(t,1<arguments.length?arguments[1]:void 0,3);n=n?n.n:this._f;)for(e(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!Lo(Fo(this,o),t)}}),Kt&&jo(i.prototype,"size",{get:function(){return Fo(this,o)[Io]}}),i},def:function(t,n,e){var r,i,o=Lo(t,n);return o?o.v=e:(t._l=o={i:i=To(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[Io]++,"F"!==i&&(t._i[i]=o)),t},getEntry:Lo,setStrong:function(t,e,n){Ye(t,e,function(t,n){this._t=Fo(t,e),this._k=n,this._l=void 0},function(){for(var t=this,n=t._k,e=t._l;e&&e.r;)e=e.p;return t._t&&(t._l=e=e?e.n:t._t._f)?si(0,"keys"==n?e.k:"values"==n?e.v:[e.k,e.v]):(t._t=void 0,si(1))},n?"entries":"values",!n,!0),fi(e)}},Ro=function(r,t,n,e,i,o){var u=Wt[r],a=u,c=i?"set":"add",f=a&&a.prototype,s={},l=function(t){var e=f[t];b(f,t,"delete"==t?function(t){return!(o&&!Yt(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(o&&!Yt(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return o&&!Yt(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof a&&(o||f.forEach&&!Ht(function(){(new a).entries().next()}))){var h=new a,p=h[c](o?{}:-0,1)!=h,v=Ht(function(){h.has(1)}),d=jr(function(t){new a(t)}),y=!o&&Ht(function(){for(var t=new a,n=5;n--;)t[c](n,n);return!t.has(-0)});d||(((a=t(function(t,n){Ti(t,a,r);var e=qn(new u,t,a);return null!=n&&Ii(n,i,e[c],e),e})).prototype=f).constructor=a),(v||y)&&(l("delete"),l("has"),i&&l("get")),(y||p)&&l(c),o&&f.clear&&delete f.clear}else a=e.getConstructor(t,r,i,c),co(a.prototype,n),m.NEED=!0;return V(a,r),s[r]=a,nn(nn.G+nn.W+nn.F*(a!=u),s),o||e.setStrong(a,r,i),a},ko=Ro("Map",function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},{get:function(t){var n=No.getEntry(Fo(this,"Map"),t);return n&&n.v},set:function(t,n){return No.def(Fo(this,"Map"),0===t?0:t,n)}},No,!0),Co=Ro("Set",function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},{add:function(t){return No.def(Fo(this,"Set"),t=0===t?0:t,t)}},No),Do=m.getWeak,Uo=Dr(5),Bo=Dr(6),Vo=0,Go=function(t){return t._l||(t._l=new qo)},qo=function(){this.a=[]},Wo=function(t,n){return Uo(t.a,function(t){return t[0]===n})};qo.prototype={get:function(t){var n=Wo(this,t);if(n)return n[1]},has:function(t){return!!Wo(this,t)},set:function(t,n){var e=Wo(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(n){var t=Bo(this.a,function(t){return t[0]===n});return~t&&this.a.splice(t,1),!!~t}};var zo={getConstructor:function(t,e,r,i){var o=t(function(t,n){Ti(t,o,e,"_i"),t._t=e,t._i=Vo++,t._l=void 0,null!=n&&Ii(n,r,t[i],t)});return co(o.prototype,{delete:function(t){if(!Yt(t))return!1;var n=Do(t);return!0===n?Go(Fo(this,e)).delete(t):n&&zt(n,this._i)&&delete n[this._i]},has:function(t){if(!Yt(t))return!1;var n=Do(t);return!0===n?Go(Fo(this,e)).has(t):n&&zt(n,this._i)}}),o},def:function(t,n,e){var r=Do(v(n),!0);return!0===r?Go(t).set(n,e):r[t._i]=e,t},ufstore:Go},Ho=n(function(t){var o,n=Dr(0),e="WeakMap",r=m.getWeak,u=Object.isExtensible,i=zo.ufstore,a={},c=function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},f={get:function(t){if(Yt(t)){var n=r(t);return!0===n?i(Fo(this,e)).get(t):n?n[this._i]:void 0}},set:function(t,n){return zo.def(Fo(this,e),t,n)}},s=t.exports=Ro(e,c,f,zo,!0,!0);Ht(function(){return 7!=(new s).set((Object.freeze||Object)(a),7).get(a)})&&(o=zo.getConstructor(c,e),Gt(o.prototype,f),m.NEED=!0,n(["delete","has","get","set"],function(r){var t=s.prototype,i=t[r];b(t,r,function(t,n){if(Yt(t)&&!u(t)){this._f||(this._f=new o);var e=this._f[r](t,n);return"set"==r?this:e}return i.call(this,t,n)})}))}),Ko="WeakSet";Ro(Ko,function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},{add:function(t){return zo.def(Fo(this,Ko),t,!0)}},zo,!1,!0);for(var Yo,Jo=Qt("typed_array"),Zo=Qt("view"),Xo=!(!Wt.ArrayBuffer||!Wt.DataView),$o=Xo,Qo=0,tu="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");Qo<9;)(Yo=Wt[tu[Qo++]])?($t(Yo.prototype,Jo,!0),$t(Yo.prototype,Zo,!0)):$o=!1;var nu={ABV:Xo,CONSTR:$o,TYPED:Jo,VIEW:Zo},eu=function(t){if(void 0===t)return 0;var n=rn(t),e=on(n);if(n!==e)throw RangeError("Wrong length!");return e},ru=n(function(t,n){var e=fn.f,r=Zt.f,i="ArrayBuffer",o="DataView",u="prototype",l="Wrong index!",a=Wt[i],c=Wt[o],f=Wt.Math,h=Wt.RangeError,p=Wt.Infinity,s=a,v=f.abs,d=f.pow,y=f.floor,g=f.log,m=f.LN2,b="byteLength",_="byteOffset",w=Kt?"_b":"buffer",S=Kt?"_l":b,E=Kt?"_o":_;function x(t,n,e){var r,i,o,u=new Array(e),a=8*e-n-1,c=(1<<a)-1,f=c>>1,s=23===n?d(2,-24)-d(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=v(t))!=t||t===p?(i=t!=t?1:0,r=c):(r=y(g(t)/m),t*(o=d(2,-r))<1&&(r--,o*=2),2<=(t+=1<=r+f?s/o:s*d(2,1-f))*o&&(r++,o/=2),c<=r+f?(i=0,r=c):1<=r+f?(i=(t*o-1)*d(2,n),r+=f):(i=t*d(2,f-1)*d(2,n),r=0));8<=n;u[l++]=255&i,i/=256,n-=8);for(r=r<<n|i,a+=n;0<a;u[l++]=255&r,r/=256,a-=8);return u[--l]|=128*h,u}function O(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,u=o>>1,a=i-7,c=e-1,f=t[c--],s=127&f;for(f>>=7;0<a;s=256*s+t[c],c--,a-=8);for(r=s&(1<<-a)-1,s>>=-a,a+=n;0<a;r=256*r+t[c],c--,a-=8);if(0===s)s=1-u;else{if(s===o)return r?NaN:f?-p:p;r+=d(2,n),s-=u}return(f?-1:1)*r*d(2,s-n)}function A(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function P(t){return[255&t]}function M(t){return[255&t,t>>8&255]}function F(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function j(t){return x(t,52,8)}function T(t){return x(t,23,4)}function I(t,n,e){r(t[u],n,{get:function(){return this[e]}})}function L(t,n,e,r){var i=eu(+e);if(i+n>t[S])throw h(l);var o=t[w]._b,u=i+t[E],a=o.slice(u,u+n);return r?a:a.reverse()}function N(t,n,e,r,i,o){var u=eu(+e);if(u+n>t[S])throw h(l);for(var a=t[w]._b,c=u+t[E],f=r(+i),s=0;s<n;s++)a[c+s]=f[o?s:n-s-1]}if(nu.ABV){if(!Ht(function(){a(1)})||!Ht(function(){new a(-1)})||Ht(function(){return new a,new a(1.5),new a(NaN),a.name!=i})){for(var R,k=(a=function(t){return Ti(this,a),new s(eu(t))})[u]=s[u],C=e(s),D=0;C.length>D;)(R=C[D++])in a||$t(a,R,s[R]);k.constructor=a}var U=new c(new a(2)),B=c[u].setInt8;U.setInt8(0,2147483648),U.setInt8(1,2147483649),!U.getInt8(0)&&U.getInt8(1)||co(c[u],{setInt8:function(t,n){B.call(this,t,n<<24>>24)},setUint8:function(t,n){B.call(this,t,n<<24>>24)}},!0)}else a=function(t){Ti(this,a,i);var n=eu(t);this._b=ni.call(new Array(n),0),this[S]=n},c=function(t,n,e){Ti(this,c,o),Ti(t,a,o);var r=t[S],i=rn(n);if(i<0||r<i)throw h("Wrong offset!");if(r<i+(e=void 0===e?r-i:on(e)))throw h("Wrong length!");this[w]=t,this[E]=i,this[S]=e},Kt&&(I(a,b,"_l"),I(c,"buffer","_b"),I(c,b,"_l"),I(c,_,"_o")),co(c[u],{getInt8:function(t){return L(this,1,t)[0]<<24>>24},getUint8:function(t){return L(this,1,t)[0]},getInt16:function(t){var n=L(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=L(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return A(L(this,4,t,arguments[1]))},getUint32:function(t){return A(L(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return O(L(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return O(L(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){N(this,1,t,P,n)},setUint8:function(t,n){N(this,1,t,P,n)},setInt16:function(t,n){N(this,2,t,M,n,arguments[2])},setUint16:function(t,n){N(this,2,t,M,n,arguments[2])},setInt32:function(t,n){N(this,4,t,F,n,arguments[2])},setUint32:function(t,n){N(this,4,t,F,n,arguments[2])},setFloat32:function(t,n){N(this,4,t,T,n,arguments[2])},setFloat64:function(t,n){N(this,8,t,j,n,arguments[2])}});V(a,i),V(c,o),$t(c[u],nu.VIEW,!0),n[i]=a,n[o]=c}),iu=Wt.ArrayBuffer,ou=ru.ArrayBuffer,uu=ru.DataView,au=nu.ABV&&iu.isView,cu=ou.prototype.slice,fu=nu.VIEW,su="ArrayBuffer";nn(nn.G+nn.W+nn.F*(iu!==ou),{ArrayBuffer:ou}),nn(nn.S+nn.F*!nu.CONSTR,su,{isView:function(t){return au&&au(t)||Yt(t)&&fu in t}}),nn(nn.P+nn.U+nn.F*Ht(function(){return!new ou(2).slice(1,void 0).byteLength}),su,{slice:function(t,n){if(void 0!==cu&&void 0===n)return cu.call(v(this),t);for(var e=v(this).byteLength,r=un(t,e),i=un(void 0===n?e:n,e),o=new(Ni(this,ou))(on(i-r)),u=new uu(this),a=new uu(o),c=0;r<i;)a.setUint8(c++,u.getUint8(r++));return o}}),fi(su),nn(nn.G+nn.W+nn.F*!nu.ABV,{DataView:ru.DataView});var lu=n(function(t){if(Kt){var g=Wt,m=Ht,b=nn,_=nu,n=ru,h=tn,w=Ti,e=Xt,S=$t,r=co,i=rn,E=on,x=eu,o=un,u=Jt,a=zt,O=gn,A=Yt,p=ln,v=xr,P=cn,M=hn,F=fn.f,d=Pr,c=Qt,f=en,s=Dr,l=an,y=Ni,j=li,T=Ve,I=jr,L=fi,N=ni,R=Xr,k=Zt,C=sn,D=k.f,U=C.f,B=g.RangeError,V=g.TypeError,G=g.Uint8Array,q="ArrayBuffer",W="Shared"+q,z="BYTES_PER_ELEMENT",H="prototype",K=Array[H],Y=n.ArrayBuffer,J=n.DataView,Z=s(0),X=s(2),$=s(3),Q=s(4),tt=s(5),nt=s(6),et=l(!0),rt=l(!1),it=j.values,ot=j.keys,ut=j.entries,at=K.lastIndexOf,ct=K.reduce,ft=K.reduceRight,st=K.join,lt=K.sort,ht=K.slice,pt=K.toString,vt=K.toLocaleString,dt=f("iterator"),yt=f("toStringTag"),gt=c("typed_constructor"),mt=c("def_constructor"),bt=_.CONSTR,_t=_.TYPED,wt=_.VIEW,St="Wrong length!",Et=s(1,function(t,n){return Mt(y(t,t[mt]),n)}),xt=m(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),Ot=!!G&&!!G[H].set&&m(function(){new G(1).set({})}),At=function(t,n){var e=i(t);if(e<0||e%n)throw B("Wrong offset!");return e},Pt=function(t){if(A(t)&&_t in t)return t;throw V(t+" is not a typed array!")},Mt=function(t,n){if(!(A(t)&&gt in t))throw V("It is not a typed array constructor!");return new t(n)},Ft=function(t,n){return jt(y(t,t[mt]),n)},jt=function(t,n){for(var e=0,r=n.length,i=Mt(t,r);e<r;)i[e]=n[e++];return i},Tt=function(t,n,e){D(t,n,{get:function(){return this._d[e]}})},It=function(t){var n,e,r,i,o,u,a=p(t),c=arguments.length,f=1<c?arguments[1]:void 0,s=void 0!==f,l=d(a);if(null!=l&&!v(l)){for(u=l.call(a),r=[],n=0;!(o=u.next()).done;n++)r.push(o.value);a=r}for(s&&2<c&&(f=h(f,arguments[2],2)),n=0,e=E(a.length),i=Mt(this,e);n<e;n++)i[n]=s?f(a[n],n):a[n];return i},Lt=function(){for(var t=0,n=arguments.length,e=Mt(this,n);t<n;)e[t]=arguments[t++];return e},Nt=!!G&&m(function(){vt.call(new G(1))}),Rt=function(){return vt.apply(Nt?ht.call(Pt(this)):Pt(this),arguments)},kt={copyWithin:function(t,n){return R.call(Pt(this),t,n,2<arguments.length?arguments[2]:void 0)},every:function(t){return Q(Pt(this),t,1<arguments.length?arguments[1]:void 0)},fill:function(t){return N.apply(Pt(this),arguments)},filter:function(t){return Ft(this,X(Pt(this),t,1<arguments.length?arguments[1]:void 0))},find:function(t){return tt(Pt(this),t,1<arguments.length?arguments[1]:void 0)},findIndex:function(t){return nt(Pt(this),t,1<arguments.length?arguments[1]:void 0)},forEach:function(t){Z(Pt(this),t,1<arguments.length?arguments[1]:void 0)},indexOf:function(t){return rt(Pt(this),t,1<arguments.length?arguments[1]:void 0)},includes:function(t){return et(Pt(this),t,1<arguments.length?arguments[1]:void 0)},join:function(t){return st.apply(Pt(this),arguments)},lastIndexOf:function(t){return at.apply(Pt(this),arguments)},map:function(t){return Et(Pt(this),t,1<arguments.length?arguments[1]:void 0)},reduce:function(t){return ct.apply(Pt(this),arguments)},reduceRight:function(t){return ft.apply(Pt(this),arguments)},reverse:function(){for(var t,n=this,e=Pt(n).length,r=Math.floor(e/2),i=0;i<r;)t=n[i],n[i++]=n[--e],n[e]=t;return n},some:function(t){return $(Pt(this),t,1<arguments.length?arguments[1]:void 0)},sort:function(t){return lt.call(Pt(this),t)},subarray:function(t,n){var e=Pt(this),r=e.length,i=o(t,r);return new(y(e,e[mt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,E((void 0===n?r:o(n,r))-i))}},Ct=function(t,n){return Ft(this,ht.call(Pt(this),t,n))},Dt=function(t){Pt(this);var n=At(arguments[1],1),e=this.length,r=p(t),i=E(r.length),o=0;if(e<i+n)throw B(St);for(;o<i;)this[n+o]=r[o++]},Ut={entries:function(){return ut.call(Pt(this))},keys:function(){return ot.call(Pt(this))},values:function(){return it.call(Pt(this))}},Bt=function(t,n){return A(t)&&t[_t]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Vt=function(t,n){return Bt(t,n=u(n,!0))?e(2,t[n]):U(t,n)},Gt=function(t,n,e){return!(Bt(t,n=u(n,!0))&&A(e)&&a(e,"value"))||a(e,"get")||a(e,"set")||e.configurable||a(e,"writable")&&!e.writable||a(e,"enumerable")&&!e.enumerable?D(t,n,e):(t[n]=e.value,t)};bt||(C.f=Vt,k.f=Gt),b(b.S+b.F*!bt,"Object",{getOwnPropertyDescriptor:Vt,defineProperty:Gt}),m(function(){pt.call({})})&&(pt=vt=function(){return st.call(this)});var qt=r({},kt);r(qt,Ut),S(qt,dt,Ut.values),r(qt,{slice:Ct,set:Dt,constructor:function(){},toString:pt,toLocaleString:Rt}),Tt(qt,"buffer","b"),Tt(qt,"byteOffset","o"),Tt(qt,"byteLength","l"),Tt(qt,"length","e"),D(qt,yt,{get:function(){return this[_t]}}),t.exports=function(t,l,n,o){var h=t+((o=!!o)?"Clamped":"")+"Array",e="get"+t,u="set"+t,p=g[h],a=p||{},r=p&&M(p),i=!p||!_.ABV,c={},f=p&&p[H],v=function(t,i){D(t,i,{get:function(){return t=i,(n=this._d).v[e](t*l+n.o,xt);var t,n},set:function(t){return n=i,e=t,r=this._d,o&&(e=(e=Math.round(e))<0?0:255<e?255:255&e),void r.v[u](n*l+r.o,e,xt);var n,e,r},enumerable:!0})};i?(p=n(function(t,n,e,r){w(t,p,h,"_d");var i,o,u,a,c=0,f=0;if(A(n)){if(!(n instanceof Y||(a=O(n))==q||a==W))return _t in n?jt(p,n):It.call(p,n);i=n,f=At(e,l);var s=n.byteLength;if(void 0===r){if(s%l)throw B(St);if((o=s-f)<0)throw B(St)}else if(s<(o=E(r)*l)+f)throw B(St);u=o/l}else u=x(n),i=new Y(o=u*l);for(S(t,"_d",{b:i,o:f,l:o,e:u,v:new J(i)});c<u;)v(t,c++)}),f=p[H]=P(qt),S(f,"constructor",p)):m(function(){p(1)})&&m(function(){new p(-1)})&&I(function(t){new p,new p(null),new p(1.5),new p(t)},!0)||(p=n(function(t,n,e,r){var i;return w(t,p,h),A(n)?n instanceof Y||(i=O(n))==q||i==W?void 0!==r?new a(n,At(e,l),r):void 0!==e?new a(n,At(e,l)):new a(n):_t in n?jt(p,n):It.call(p,n):new a(x(n))}),Z(r!==Function.prototype?F(a).concat(F(r)):F(a),function(t){t in p||S(p,t,a[t])}),(p[H]=f).constructor=p);var s=f[dt],d=!!s&&("values"==s.name||null==s.name),y=Ut.values;S(p,gt,!0),S(f,_t,h),S(f,wt,!0),S(f,mt,p),(o?new p(1)[yt]==h:yt in f)||D(f,yt,{get:function(){return h}}),c[h]=p,b(b.G+b.W+b.F*(p!=a),c),b(b.S,h,{BYTES_PER_ELEMENT:l}),b(b.S+b.F*m(function(){a.of.call(p,1)}),h,{from:It,of:Lt}),z in f||S(f,z,l),b(b.P,h,kt),L(h),b(b.P+b.F*Ot,h,{set:Dt}),b(b.P+b.F*!d,h,Ut),f.toString!=pt&&(f.toString=pt),b(b.P+b.F*m(function(){new p(1).slice()}),h,{slice:Ct}),b(b.P+b.F*(m(function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()})||!m(function(){f.toLocaleString.call([1,2])})),h,{toLocaleString:Rt}),T[h]=d?s:y,d||S(f,dt,y)}}else t.exports=function(){}});lu("Int8",1,function(r){return function(t,n,e){return r(this,t,n,e)}}),lu("Uint8",1,function(r){return function(t,n,e){return r(this,t,n,e)}}),lu("Uint8",1,function(r){return function(t,n,e){return r(this,t,n,e)}},!0),lu("Int16",2,function(r){return function(t,n,e){return r(this,t,n,e)}}),lu("Uint16",2,function(r){return function(t,n,e){return r(this,t,n,e)}}),lu("Int32",4,function(r){return function(t,n,e){return r(this,t,n,e)}}),lu("Uint32",4,function(r){return function(t,n,e){return r(this,t,n,e)}}),lu("Float32",4,function(r){return function(t,n,e){return r(this,t,n,e)}}),lu("Float64",8,function(r){return function(t,n,e){return r(this,t,n,e)}});var hu=(Wt.Reflect||{}).apply,pu=Function.apply;nn(nn.S+nn.F*!Ht(function(){hu(function(){})}),"Reflect",{apply:function(t,n,e){var r=s(t),i=v(e);return hu?hu(r,n,i):pu.call(r,n,i)}});var vu=(Wt.Reflect||{}).construct,du=Ht(function(){function t(){}return!(vu(function(){},[],t)instanceof t)}),yu=!Ht(function(){vu(function(){})});nn(nn.S+nn.F*(du||yu),"Reflect",{construct:function(t,n){s(t),v(n);var e=arguments.length<3?t:s(arguments[2]);if(yu&&!du)return vu(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(Sn.apply(t,r))}var i=e.prototype,o=cn(Yt(i)?i:Object.prototype),u=Function.apply.call(t,o,n);return Yt(u)?u:o}}),nn(nn.S+nn.F*Ht(function(){Reflect.defineProperty(Zt.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){v(t),n=Jt(n,!0),v(e);try{return Zt.f(t,n,e),!0}catch(t){return!1}}});var gu=sn.f;nn(nn.S,"Reflect",{deleteProperty:function(t,n){var e=gu(v(t),n);return!(e&&!e.configurable)&&delete t[n]}});var mu=function(t){this._t=v(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};qe(mu,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),nn(nn.S,"Reflect",{enumerate:function(t){return new mu(t)}}),nn(nn.S,"Reflect",{get:function t(n,e){var r,i,o=arguments.length<3?n:arguments[2];return v(n)===o?n[e]:(r=sn.f(n,e))?zt(r,"value")?r.value:void 0!==r.get?r.get.call(o):void 0:Yt(i=hn(n))?t(i,e,o):void 0}}),nn(nn.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return sn.f(v(t),n)}}),nn(nn.S,"Reflect",{getPrototypeOf:function(t){return hn(v(t))}}),nn(nn.S,"Reflect",{has:function(t,n){return n in t}});var bu=Object.isExtensible;nn(nn.S,"Reflect",{isExtensible:function(t){return v(t),!bu||bu(t)}});var _u=Wt.Reflect,wu=_u&&_u.ownKeys||function(t){var n=fn.f(v(t)),e=B.f;return e?n.concat(e(t)):n};nn(nn.S,"Reflect",{ownKeys:wu});var Su=Object.preventExtensions;nn(nn.S,"Reflect",{preventExtensions:function(t){v(t);try{return Su&&Su(t),!0}catch(t){return!1}}}),nn(nn.S,"Reflect",{set:function t(n,e,r){var i,o,u=arguments.length<4?n:arguments[3],a=sn.f(v(n),e);if(!a){if(Yt(o=hn(n)))return t(o,e,r,u);a=Xt(0)}if(zt(a,"value")){if(!1===a.writable||!Yt(u))return!1;if(i=sn.f(u,e)){if(i.get||i.set||!1===i.writable)return!1;i.value=r,Zt.f(u,e,i)}else Zt.f(u,e,Xt(0,r));return!0}return void 0!==a.set&&(a.set.call(u,r),!0)}}),vn&&nn(nn.S,"Reflect",{setPrototypeOf:function(t,n){vn.check(t,n);try{return vn.set(t,n),!0}catch(t){return!1}}});var Eu=an(!0);nn(nn.P,"Array",{includes:function(t){return Eu(this,t,1<arguments.length?arguments[1]:void 0)}}),ti("includes");var xu=en("isConcatSpreadable");var Ou=function t(n,e,r,i,o,u,a,c){for(var f,s,l=o,h=0,p=!!a&&tn(a,c,3);h<i;){if(h in r){if(f=p?p(r[h],h,e):r[h],s=!1,Yt(f)&&(s=void 0!==(s=f[xu])?!!s:q(f)),s&&0<u)l=t(n,e,f,on(f.length),l,u-1)-1;else{if(9007199254740991<=l)throw TypeError();n[l]=f}l++}h++}return l};nn(nn.P,"Array",{flatMap:function(t){var n,e,r=ln(this);return s(t),n=on(r.length),e=Cr(r,0),Ou(e,r,r,n,0,1,t,arguments[1]),e}}),ti("flatMap"),nn(nn.P,"Array",{flatten:function(){var t=arguments[0],n=ln(this),e=on(n.length),r=Cr(n,0);return Ou(r,n,n,e,0,void 0===t?1:rn(t)),r}}),ti("flatten");var Au=Be(!0);nn(nn.P,"String",{at:function(t){return Au(this,t)}});var Pu=function(t,n,e,r){var i=String(A(t)),o=i.length,u=void 0===e?" ":String(e),a=on(n);if(a<=o||""==u)return i;var c=a-o,f=oe.call(u,Math.ceil(c/u.length));return f.length>c&&(f=f.slice(0,c)),r?f+i:i+f};nn(nn.P+nn.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(uo),"String",{padStart:function(t){return Pu(this,t,1<arguments.length?arguments[1]:void 0,!0)}}),nn(nn.P+nn.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(uo),"String",{padEnd:function(t){return Pu(this,t,1<arguments.length?arguments[1]:void 0,!1)}}),Nn("trimLeft",function(t){return function(){return t(this,1)}},"trimStart"),Nn("trimRight",function(t){return function(){return t(this,2)}},"trimEnd");var Mu=RegExp.prototype,Fu=function(t,n){this._r=t,this._s=n};qe(Fu,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),nn(nn.P,"String",{matchAll:function(t){if(A(this),!$e(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in Mu?String(t.flags):hi.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=on(t.lastIndex),new Fu(r,n)}}),S("asyncIterator"),S("observable"),nn(nn.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=P(t),i=sn.f,o=wu(r),u={},a=0;o.length>a;)void 0!==(e=i(r,n=o[a++]))&&Or(u,n,e);return u}});var ju=G.f,Tu=function(a){return function(t){for(var n,e=P(t),r=U(e),i=r.length,o=0,u=[];o<i;)ju.call(e,n=r[o++])&&u.push(a?[n,e[n]]:e[n]);return u}},Iu=Tu(!1);nn(nn.S,"Object",{values:function(t){return Iu(t)}});var Lu=Tu(!0);nn(nn.S,"Object",{entries:function(t){return Lu(t)}});var Nu=!Ht(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete Wt[t]});Kt&&nn(nn.P+Nu,"Object",{__defineGetter__:function(t,n){Zt.f(ln(this),t,{get:s(n),enumerable:!0,configurable:!0})}}),Kt&&nn(nn.P+Nu,"Object",{__defineSetter__:function(t,n){Zt.f(ln(this),t,{set:s(n),enumerable:!0,configurable:!0})}});var Ru=sn.f;Kt&&nn(nn.P+Nu,"Object",{__lookupGetter__:function(t){var n,e=ln(this),r=Jt(t,!0);do{if(n=Ru(e,r))return n.get}while(e=hn(e))}});var ku=sn.f;Kt&&nn(nn.P+Nu,"Object",{__lookupSetter__:function(t){var n,e=ln(this),r=Jt(t,!0);do{if(n=ku(e,r))return n.set}while(e=hn(e))}});var Cu=function(t,n){var e=[];return Ii(t,!1,e.push,e,n),e},Du=function(t){return function(){if(gn(this)!=t)throw TypeError(t+"#toJSON isn't generic");return Cu(this)}};nn(nn.P+nn.R,"Map",{toJSON:Du("Map")}),nn(nn.P+nn.R,"Set",{toJSON:Du("Set")});var Uu=function(t){nn(nn.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})};Uu("Map"),Uu("Set"),Uu("WeakMap"),Uu("WeakSet");var Bu=function(t){nn(nn.S,t,{from:function(t){var n,e,r,i,o=arguments[1];return s(this),(n=void 0!==o)&&s(o),null==t?new this:(e=[],n?(r=0,i=tn(o,arguments[2],2),Ii(t,!1,function(t){e.push(i(t,r++))})):Ii(t,!1,e.push,e),new this(e))}})};Bu("Map"),Bu("Set"),Bu("WeakMap"),Bu("WeakSet"),nn(nn.G,{global:Wt}),nn(nn.S,"System",{global:Wt}),nn(nn.S,"Error",{isError:function(t){return"Error"===x(t)}}),nn(nn.S,"Math",{clamp:function(t,n,e){return Math.min(e,Math.max(n,t))}}),nn(nn.S,"Math",{DEG_PER_RAD:Math.PI/180});var Vu=180/Math.PI;nn(nn.S,"Math",{degrees:function(t){return t*Vu}});var Gu=Math.scale||function(t,n,e,r,i){return 0===arguments.length||t!=t||n!=n||e!=e||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-r)/(e-n)+r};nn(nn.S,"Math",{fscale:function(t,n,e,r,i){return Le(Gu(t,n,e,r,i))}}),nn(nn.S,"Math",{iaddh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}}),nn(nn.S,"Math",{isubh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}}),nn(nn.S,"Math",{imulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>16,a=r>>16,c=(u*o>>>0)+(i*o>>>16);return u*a+(c>>16)+((i*a>>>0)+(65535&c)>>16)}}),nn(nn.S,"Math",{RAD_PER_DEG:180/Math.PI});var qu=Math.PI/180;nn(nn.S,"Math",{radians:function(t){return t*qu}}),nn(nn.S,"Math",{scale:Gu}),nn(nn.S,"Math",{umulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>>16,a=r>>>16,c=(u*o>>>0)+(i*o>>>16);return u*a+(c>>>16)+((i*a>>>0)+(65535&c)>>>16)}}),nn(nn.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:0<t}}),nn(nn.P+nn.R,"Promise",{finally:function(n){var e=Ni(this,d.Promise||Wt.Promise),t="function"==typeof n;return this.then(t?function(t){return ao(e,n()).then(function(){return t})}:n,t?function(t){return ao(e,n()).then(function(){throw t})}:n)}}),nn(nn.S,"Promise",{try:function(t){var n=ro.f(this),e=io(t);return(e.e?n.reject:n.resolve)(e.v),n.promise}});var Wu=l("metadata"),zu=Wu.store||(Wu.store=new Ho),Hu=function(t,n,e){var r=zu.get(t);if(!r){if(!e)return;zu.set(t,r=new ko)}var i=r.get(n);if(!i){if(!e)return;r.set(n,i=new ko)}return i},Ku={store:zu,map:Hu,has:function(t,n,e){var r=Hu(n,e,!1);return void 0!==r&&r.has(t)},get:function(t,n,e){var r=Hu(n,e,!1);return void 0===r?void 0:r.get(t)},set:function(t,n,e,r){Hu(e,r,!0).set(t,n)},keys:function(t,n){var e=Hu(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){nn(nn.S,"Reflect",t)}},Yu=Ku.key,Ju=Ku.set;Ku.exp({defineMetadata:function(t,n,e,r){Ju(t,n,v(e),Yu(r))}});var Zu=Ku.key,Xu=Ku.map,$u=Ku.store;Ku.exp({deleteMetadata:function(t,n){var e=arguments.length<3?void 0:Zu(arguments[2]),r=Xu(v(n),e,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var i=$u.get(n);return i.delete(e),!!i.size||$u.delete(n)}});var Qu=Ku.has,ta=Ku.get,na=Ku.key,ea=function(t,n,e){if(Qu(t,n,e))return ta(t,n,e);var r=hn(n);return null!==r?ea(t,r,e):void 0};Ku.exp({getMetadata:function(t,n){return ea(t,v(n),arguments.length<3?void 0:na(arguments[2]))}});var ra=Ku.keys,ia=Ku.key,oa=function(t,n){var e=ra(t,n),r=hn(t);if(null===r)return e;var i=oa(r,n);return i.length?e.length?Cu(new Co(e.concat(i))):i:e};Ku.exp({getMetadataKeys:function(t){return oa(v(t),arguments.length<2?void 0:ia(arguments[1]))}});var ua=Ku.get,aa=Ku.key;Ku.exp({getOwnMetadata:function(t,n){return ua(t,v(n),arguments.length<3?void 0:aa(arguments[2]))}});var ca=Ku.keys,fa=Ku.key;Ku.exp({getOwnMetadataKeys:function(t){return ca(v(t),arguments.length<2?void 0:fa(arguments[1]))}});var sa=Ku.has,la=Ku.key,ha=function(t,n,e){if(sa(t,n,e))return!0;var r=hn(n);return null!==r&&ha(t,r,e)};Ku.exp({hasMetadata:function(t,n){return ha(t,v(n),arguments.length<3?void 0:la(arguments[2]))}});var pa=Ku.has,va=Ku.key;Ku.exp({hasOwnMetadata:function(t,n){return pa(t,v(n),arguments.length<3?void 0:va(arguments[2]))}});var da=Ku.key,ya=Ku.set;Ku.exp({metadata:function(e,r){return function(t,n){ya(e,r,(void 0!==n?v:s)(t),da(n))}}});var ga=Xi(),ma=Wt.process,ba="process"==x(ma);nn(nn.G,{asap:function(t){var n=ba&&ma.domain;ga(n?n.bind(t):t)}});var _a=Xi(),wa=en("observable"),Sa=Ii.RETURN,Ea=function(t){return null==t?void 0:s(t)},xa=function(t){var n=t._c;n&&(t._c=void 0,n())},Oa=function(t){return void 0===t._o},Aa=function(t){Oa(t)||(t._o=void 0,xa(t))},Pa=function(n,t){v(n),this._c=void 0,this._o=n,n=new Ma(this);try{var e=t(n),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:s(e),this._c=e)}catch(t){return void n.error(t)}Oa(this)&&xa(this)};Pa.prototype=co({},{unsubscribe:function(){Aa(this)}});var Ma=function(t){this._s=t};Ma.prototype=co({},{next:function(t){var n=this._s;if(!Oa(n)){var e=n._o;try{var r=Ea(e.next);if(r)return r.call(e,t)}catch(t){try{Aa(n)}finally{throw t}}}},error:function(t){var n=this._s;if(Oa(n))throw t;var e=n._o;n._o=void 0;try{var r=Ea(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{xa(n)}finally{throw t}}return xa(n),t},complete:function(t){var n=this._s;if(!Oa(n)){var e=n._o;n._o=void 0;try{var r=Ea(e.complete);t=r?r.call(e,t):void 0}catch(t){try{xa(n)}finally{throw t}}return xa(n),t}}});var Fa=function(t){Ti(this,Fa,"Observable","_f")._f=s(t)};co(Fa.prototype,{subscribe:function(t){return new Pa(t,this._f)},forEach:function(r){var i=this;return new(d.Promise||Wt.Promise)(function(t,n){s(r);var e=i.subscribe({next:function(t){try{return r(t)}catch(t){n(t),e.unsubscribe()}},error:n,complete:t})})}}),co(Fa,{from:function(t){var n="function"==typeof this?this:Fa,e=Ea(v(t)[wa]);if(e){var r=v(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return _a(function(){if(!e){try{if(Ii(t,!1,function(t){if(n.next(t),e)return Sa})===Sa)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,r=new Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:Fa)(function(n){var e=!1;return _a(function(){if(!e){for(var t=0;t<r.length;++t)if(n.next(r[t]),e)return;n.complete()}}),function(){e=!0}})}}),$t(Fa.prototype,wa,function(){return this}),nn(nn.G,{Observable:Fa}),fi("Observable");var ja=[].slice,Ta=/MSIE .\./.test(uo),Ia=function(i){return function(t,n){var e=2<arguments.length,r=!!e&&ja.call(arguments,2);return i(e?function(){("function"==typeof t?t:Function(t)).apply(this,r)}:t,n)}};nn(nn.G+nn.B+nn.F*Ta,{setTimeout:Ia(Wt.setTimeout),setInterval:Ia(Wt.setInterval)}),nn(nn.G+nn.B,{setImmediate:zi.set,clearImmediate:zi.clear});for(var La=en("iterator"),Na=en("toStringTag"),Ra=Ve.Array,ka={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},Ca=U(ka),Da=0;Da<Ca.length;Da++){var Ua,Ba=Ca[Da],Va=ka[Ba],Ga=Wt[Ba],qa=Ga&&Ga.prototype;if(qa&&(qa[La]||$t(qa,La,Ra),qa[Na]||$t(qa,Na,Ba),Ve[Ba]=Ra,Va))for(Ua in li)qa[Ua]||b(qa,Ua,li[Ua],!0)}n(function(T){!function(t){var c,n=Object.prototype,f=n.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},i=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag",u=t.regeneratorRuntime;if(u)T.exports=u;else{(u=t.regeneratorRuntime=T.exports).wrap=m;var l="suspendedStart",h="suspendedYield",p="executing",v="completed",d={},a={};a[i]=function(){return this};var s=Object.getPrototypeOf,y=s&&s(s(F([])));y&&y!==n&&f.call(y,i)&&(a=y);var g=S.prototype=_.prototype=Object.create(a);w.prototype=g.constructor=S,S.constructor=w,S[o]=w.displayName="GeneratorFunction",u.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===w||"GeneratorFunction"===(n.displayName||n.name))},u.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,o in t||(t[o]="GeneratorFunction")),t.prototype=Object.create(g),t},u.awrap=function(t){return{__await:t}},E(x.prototype),x.prototype[r]=function(){return this},u.AsyncIterator=x,u.async=function(t,n,e,r){var i=new x(m(t,n,e,r));return u.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},E(g),g[o]="Generator",g[i]=function(){return this},g.toString=function(){return"[object Generator]"},u.keys=function(e){var r=[];for(var t in e)r.push(t);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},u.values=F,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(P),!t)for(var n in this)"t"===n.charAt(0)&&f.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=c)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function t(t,n){return o.type="throw",o.arg=e,r.next=t,n&&(r.method="next",r.arg=c),!!n}for(var n=this.tryEntries.length-1;0<=n;--n){var i=this.tryEntries[n],o=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var u=f.call(i,"catchLoc"),a=f.call(i,"finallyLoc");if(u&&a){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&f.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=n,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(o)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;0<=n;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),P(e),d}},catch:function(t){for(var n=this.tryEntries.length-1;0<=n;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;P(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:F(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=c),d}}}function m(t,n,e,r){var o,u,a,c,i=n&&n.prototype instanceof _?n:_,f=Object.create(i.prototype),s=new M(r||[]);return f._invoke=(o=t,u=e,a=s,c=l,function(t,n){if(c===p)throw new Error("Generator is already running");if(c===v){if("throw"===t)throw n;return j()}for(a.method=t,a.arg=n;;){var e=a.delegate;if(e){var r=O(e,a);if(r){if(r===d)continue;return r}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(c===l)throw c=v,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);c=p;var i=b(o,u,a);if("normal"===i.type){if(c=a.done?v:h,i.arg===d)continue;return{value:i.arg,done:a.done}}"throw"===i.type&&(c=v,a.method="throw",a.arg=i.arg)}}),f}function b(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function _(){}function w(){}function S(){}function E(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function x(a){function c(t,n,e,r){var i=b(a[t],a,n);if("throw"!==i.type){var o=i.arg,u=o.value;return u&&"object"==typeof u&&f.call(u,"__await")?Promise.resolve(u.__await).then(function(t){c("next",t,e,r)},function(t){c("throw",t,e,r)}):Promise.resolve(u).then(function(t){o.value=t,e(o)},r)}r(i.arg)}var n;"object"==typeof t.process&&t.process.domain&&(c=t.process.domain.bind(c)),this._invoke=function(e,r){function t(){return new Promise(function(t,n){c(e,r,t,n)})}return n=n?n.then(t,t):t()}}function O(t,n){var e=t.iterator[n.method];if(e===c){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=c,O(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var r=b(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,d;var i=r.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=c),n.delegate=null,d):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function A(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function P(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function F(n){if(n){var t=n[i];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var e=-1,r=function t(){for(;++e<n.length;)if(f.call(n,e))return t.value=n[e],t.done=!1,t;return t.value=c,t.done=!0,t};return r.next=r}}return{next:j}}function j(){return{value:c,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:t)});var Wa,za,Ha,Ka=(Wa=/[\\^$*+?.()|[\]{}]/g,Ha=(za="\\$&")===Object(za)?function(t){return za[t]}:za,function(t){return String(t).replace(Wa,Ha)});nn(nn.S,"RegExp",{escape:function(t){return Ka(t)}});d.RegExp.escape;if(t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;function Ya(t,n,e){t[n]||Object.defineProperty(t,n,{writable:!0,configurable:!0,value:e})}Ya(String.prototype,"padLeft","".padStart),Ya(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&Ya(Array,t,Function.call.bind([][t]))}),function(t){if(!t.fetch){var n="URLSearchParams"in t,e="Symbol"in t&&"iterator"in Symbol,u="FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),r="FormData"in t,i="ArrayBuffer"in t;if(i)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=function(t){return t&&DataView.prototype.isPrototypeOf(t)},c=ArrayBuffer.isView||function(t){return t&&-1<o.indexOf(Object.prototype.toString.call(t))};v.prototype.append=function(t,n){t=l(t),n=h(n);var e=this.map[t];this.map[t]=e?e+","+n:n},v.prototype.delete=function(t){delete this.map[l(t)]},v.prototype.get=function(t){return t=l(t),this.has(t)?this.map[t]:null},v.prototype.has=function(t){return this.map.hasOwnProperty(l(t))},v.prototype.set=function(t,n){this.map[l(t)]=h(n)},v.prototype.forEach=function(t,n){for(var e in this.map)this.map.hasOwnProperty(e)&&t.call(n,this.map[e],e,this)},v.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),p(e)},v.prototype.values=function(){var n=[];return this.forEach(function(t){n.push(t)}),p(n)},v.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),p(e)},e&&(v.prototype[Symbol.iterator]=v.prototype.entries);var f=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];_.prototype.clone=function(){return new _(this,{body:this._bodyInit})},b.call(_.prototype),b.call(S.prototype),S.prototype.clone=function(){return new S(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new v(this.headers),url:this.url})},S.error=function(){var t=new S(null,{status:0,statusText:""});return t.type="error",t};var s=[301,302,303,307,308];S.redirect=function(t,n){if(-1===s.indexOf(n))throw new RangeError("Invalid status code");return new S(null,{status:n,headers:{location:t}})},t.Headers=v,t.Request=_,t.Response=S,t.fetch=function(e,i){return new Promise(function(r,t){var n=new _(e,i),o=new XMLHttpRequest;o.onload=function(){var t,i,n={status:o.status,statusText:o.statusText,headers:(t=o.getAllResponseHeaders()||"",i=new v,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),e=n.shift().trim();if(e){var r=n.join(":").trim();i.append(e,r)}}),i)};n.url="responseURL"in o?o.responseURL:n.headers.get("X-Request-URL");var e="response"in o?o.response:o.responseText;r(new S(e,n))},o.onerror=function(){t(new TypeError("Network request failed"))},o.ontimeout=function(){t(new TypeError("Network request failed"))},o.open(n.method,n.url,!0),"include"===n.credentials?o.withCredentials=!0:"omit"===n.credentials&&(o.withCredentials=!1),"responseType"in o&&u&&(o.responseType="blob"),n.headers.forEach(function(t,n){o.setRequestHeader(n,t)}),o.send(void 0===n._bodyInit?null:n._bodyInit)})},t.fetch.polyfill=!0}function l(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function h(t){return"string"!=typeof t&&(t=String(t)),t}function p(n){var t={next:function(){var t=n.shift();return{done:void 0===t,value:t}}};return e&&(t[Symbol.iterator]=function(){return t}),t}function v(n){this.map={},n instanceof v?n.forEach(function(t,n){this.append(n,t)},this):Array.isArray(n)?n.forEach(function(t){this.append(t[0],t[1])},this):n&&Object.getOwnPropertyNames(n).forEach(function(t){this.append(t,n[t])},this)}function d(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function y(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function g(t){var n=new FileReader,e=y(n);return n.readAsArrayBuffer(t),e}function m(t){if(t.slice)return t.slice(0);var n=new Uint8Array(t.byteLength);return n.set(new Uint8Array(t)),n.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t)if("string"==typeof t)this._bodyText=t;else if(u&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(r&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(n&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(i&&u&&a(t))this._bodyArrayBuffer=m(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!i||!ArrayBuffer.prototype.isPrototypeOf(t)&&!c(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=m(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},u&&(this.blob=function(){var t=d(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(g)}),this.text=function(){var t,n,e,r=d(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,e=y(n),n.readAsText(t),e;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var n=new Uint8Array(t),e=new Array(n.length),r=0;r<n.length;r++)e[r]=String.fromCharCode(n[r]);return e.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r&&(this.formData=function(){return this.text().then(w)}),this.json=function(){return this.text().then(JSON.parse)},this}function _(t,n){var e,r,i=(n=n||{}).body;if(t instanceof _){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,n.headers||(this.headers=new v(t.headers)),this.method=t.method,this.mode=t.mode,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=n.credentials||this.credentials||"omit",!n.headers&&this.headers||(this.headers=new v(n.headers)),this.method=(e=n.method||this.method||"GET",r=e.toUpperCase(),-1<f.indexOf(r)?r:e),this.mode=n.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function w(t){var i=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),e=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");i.append(decodeURIComponent(e),decodeURIComponent(r))}}),i}function S(t,n){n||(n={}),this.type="default",this.status=void 0===n.status?200:n.status,this.ok=200<=this.status&&this.status<300,this.statusText="statusText"in n?n.statusText:"OK",this.headers=new v(n.headers),this.url=n.url||"",this._initBody(t)}}("undefined"!=typeof self?self:void 0);var Ja=function(t){var n="+7 (___) ___-__-__",e=t.target,r=n.replace(/\D/g,""),i=e.value.replace(/\D/g,""),o=0;e.setCustomValidity(""),r.length>=i.length&&(i=r),e.value=n.replace(/./g,function(t){return/[_\d]/.test(t)&&o<i.length?i.charAt(o++):o>=i.length?"":t}),function(t,n){if(n.focus(),n.setSelectionRange)n.setSelectionRange(t,t);else if(n.createTextRange){var e=n.createTextRange();e.collapse(!0),e.moveEnd("character",t),e.moveStart("character",t),e.select()}}(e.value.length,e)},Za=function(){var t=document.querySelector("#mail");if(document.querySelector(".error__message--mail")){var n=document.querySelector(".error__message--mail");n.parentNode.removeChild(n)}t.setCustomValidity(""),t.value?t.value.match("^[A-Za-z0-9][A-Za-z0-9.-_]*[A-Za-z0-9]*@([A-Za-z0-9]+([A-Za-z0-9-]*[A-Za-z0-9]+)*.)+[A-Za-z]*$")?(t.setAttribute("style","border: 2px solid rgb(0, 255, 0)"),t.setCustomValidity("")):(t.setCustomValidity("Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÐºÐ¾ÑÑÐµÐºÑÐ½ÑÐ¹ e-mail"),t.setAttribute("style","border: 2px solid rgb(255, 0, 0)"),t.insertAdjacentHTML("afterend",'<p class="error__message error__message--mail">Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÐºÐ¾ÑÑÐµÐºÑÐ½ÑÐ¹ e-mail</p>')):(t.setCustomValidity("ÐÐ¾Ð»Ðµ Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼"),t.setAttribute("style","border: 2px solid rgb(255, 0, 0)"),t.insertAdjacentHTML("afterend",'<p class="error__message error__message--mail">ÐÐ¾Ð»Ðµ Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼</p>'))},Xa=function(){var t=document.querySelector("#name");if(document.querySelector(".error__message--name")){var n=document.querySelector(".error__message--name");n.parentNode.removeChild(n)}t.setCustomValidity(""),t.value?(t.setAttribute("style","border: 2px solid rgb(0, 255, 0)"),t.setCustomValidity("")):(t.setCustomValidity("ÐÐ¾Ð»Ðµ Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼"),t.setAttribute("style","border: 2px solid rgb(255, 0, 0)"),t.insertAdjacentHTML("afterend",'<p class="error__message error__message--name">ÐÐ¾Ð»Ðµ Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼</p>'))},$a=function(){var t=document.querySelector("#phone");if(document.querySelector(".error__message--phone")){var n=document.querySelector(".error__message--phone");n.parentNode.removeChild(n)}t.setCustomValidity(""),2===t.value.length?(t.value="",t.setCustomValidity("ÐÐ¾Ð»Ðµ Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼"),t.setAttribute("style","border: 2px solid rgb(255, 0, 0)"),t.insertAdjacentHTML("afterend",'<p class="error__message error__message--phone">ÐÐ¾Ð»Ðµ Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼</p>')):t.value.length<18?(t.setCustomValidity("Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÐºÐ¾ÑÑÐµÐºÑÐ½ÑÐ¹ Ð½Ð¾Ð¼ÐµÑ"),t.insertAdjacentHTML("afterend",'<p class="error__message error__message--phone">Ð£ÐºÐ°Ð¶Ð¸ÑÐµ ÐºÐ¾ÑÑÐµÐºÑÐ½ÑÐ¹ Ð½Ð¾Ð¼ÐµÑ</p>'),t.setAttribute("style","border: 2px solid rgb(255, 0, 0)")):(t.setAttribute("style","border: 2px solid rgb(0, 255, 0)"),t.setCustomValidity(""))},Qa=function(t){return n='<div class="error">\n        <p class="error">ÐÑÐ¾Ð¸Ð·Ð¾ÑÐ»Ð° Ð¾ÑÐ¸Ð±ÐºÐ° '+t+' =(</p>\n        <p class="error">ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð¿ÑÐ¾Ð±ÑÐ¹ÑÐµ Ð¿ÐµÑÐµÐ·Ð°Ð³ÑÑÐ·Ð¸ÑÑ ÑÑÑÐ°Ð½Ð¸ÑÑ.</p>\n      </div>',void document.querySelector("body").insertAdjacentHTML("afterBegin",n);var n},tc=function(n){return new Promise(function(t){n.ok&&t(n)})},nc=document.querySelector(".promo__button"),ec=document.querySelector("body"),rc=function(t){var n=document.createElement("div");return n.innerHTML=t,n.children[0]},ic=function(){var t=document.querySelector(".modal-popup"),n=document.querySelector(".modal-overlay");t.classList.add("modal-popup--close"),n.classList.add("modal-overlay--close"),setTimeout(function(){ec.removeChild(t),ec.removeChild(n)},400)},oc=function t(n){document.querySelector(".modal")&&27===n.keyCode&&(ic(),document.removeEventListener("keydown",t))},uc=function(){ic()};nc.addEventListener("click",function(){var r=rc('<div class="modal-popup">\n    <buttton class="modal-popup__close">ÐÐ°ÐºÑÑÑÑ</buttton>\n    <h2 class="modal-popup__header">ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ¾ÑÐ¼Ñ</h2>\n    <form class="modal-popup__wrapper" method="post" enctype="multipart/form-data">\n      <div class="modal-popup__group">\n        <label class="modal-popup__label" for="name">ÐÐ¼Ñ</label>\n        <input class="modal-popup__input" type="text" id="name" name="name" placeholder="ÐÐ°Ðº Ðº ÐÐ°Ð¼ Ð¼Ð¾Ð¶Ð½Ð¾ Ð¾Ð±ÑÐ°ÑÐ°ÑÑÑÑ" required="true">\n      </div>\n      <div class="modal-popup__group">\n        <label class="modal-popup__label" for="phone">Ð¢ÐµÐ»ÐµÑÐ¾Ð½</label>\n        <input class="modal-popup__input" type="text" id="phone" name="phone" placeholder="+7(___)___-__-__" required="true">\n      </div>\n      <div class="modal-popup__group">\n        <label class="modal-popup__label" for="mail">E-mail</label>\n        <input class="modal-popup__input" type="text" id="mail" name="mail" placeholder="Ð£ÐºÐ°Ð¶Ð¸ÑÐµ e-mail" required="true">\n      </div>\n      <div class="modal-popup__group modal-popup__group--wide">\n        <label class="modal-popup__label" for="text">Ð¡Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ</label>\n        <textarea class="modal-popup__input" type="text" id="text" name="text" placeholder="Ð¢ÐµÐºÑÑ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ"></textarea>\n      </div>\n      <button class="main-button modal-popup__submit" type="submit">ÐÑÐ¿ÑÐ°Ð²Ð¸ÑÑ</button>\n    </form>\n  </div>'),t=rc('<div class="modal-overlay"></div>');ec.insertAdjacentElement("beforeEnd",r),ec.insertAdjacentElement("beforeEnd",t);var i=r.querySelectorAll("input"),n=r.querySelector(".modal-popup__close"),e=r.querySelector(".modal-popup__submit"),o=r.querySelector("#phone"),u=r.querySelector("#mail"),a=r.querySelector("#name");document.addEventListener("keydown",oc),r.querySelector("#phone").addEventListener("input",Ja,!1),o.addEventListener("blur",$a,!1),u.addEventListener("blur",Za,!1),a.addEventListener("blur",Xa,!1),t.addEventListener("click",uc),n.addEventListener("click",function(){ic()}),e.addEventListener("click",function(t){t.preventDefault();var n=r.querySelector(".modal-popup__wrapper");if(o.addEventListener("blur",$a(),!1),u.addEventListener("blur",Za(),!1),a.addEventListener("blur",Xa(),!1),Array.from(i).every(function(t){return!1!==t.checkValidity()})){var e=new FormData(n);fetch("http://date.jsontest.com/",{body:e,headers:{"Content-Type":"multipart/form-data"},method:"POST"}).then(tc).catch(Qa),ic()}})})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwic291cmNlL2pzL3Bob25lLW1hc2suanMiLCJzb3VyY2UvanMvdmFsaWRhdGlvbi5qcyIsInNvdXJjZS9qcy91cGxvYWRlci5qcyIsInNvdXJjZS9qcy9tb2RhbC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJtb2R1bGUiLCJleHBvcnRzIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsImhhc093blByb3BlcnR5IiwiX2hhcyIsIml0Iiwia2V5IiwiY2FsbCIsIl9mYWlscyIsImV4ZWMiLCJlIiwiX2Rlc2NyaXB0b3JzIiwicmVxdWlyZSQkMCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiYSIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiX2lzT2JqZWN0IiwiX2FuT2JqZWN0IiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsIl9kb21DcmVhdGUiLCJfaWU4RG9tRGVmaW5lIiwicmVxdWlyZSQkMSIsInJlcXVpcmUkJDIiLCJfdG9QcmltaXRpdmUiLCJTIiwiZm4iLCJ2YWwiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJkUCIsIk8iLCJQIiwiQXR0cmlidXRlcyIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCJJRThfRE9NX0RFRklORSIsInZhbHVlIiwiX3Byb3BlcnR5RGVzYyIsImJpdG1hcCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9oaWRlIiwib2JqZWN0IiwiZiIsImNyZWF0ZURlc2MiLCJpZCIsInB4IiwicmFuZG9tIiwiX3VpZCIsImNvbmNhdCIsInVuZGVmaW5lZCIsIlNSQyIsIlRPX1NUUklORyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiaGFzIiwiaGlkZSIsImpvaW4iLCJTdHJpbmciLCJwcm90b3R5cGUiLCJ0aGlzIiwiX2FGdW5jdGlvbiIsIl9jdHgiLCJ0aGF0IiwibGVuZ3RoIiwiYUZ1bmN0aW9uIiwiYiIsImMiLCJhcHBseSIsImFyZ3VtZW50cyIsIlBST1RPVFlQRSIsIiRleHBvcnQiLCJ0eXBlIiwibmFtZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwiY3R4IiwicmVkZWZpbmUiLCJVIiwiVyIsIlIiLCJfZXhwb3J0IiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJpIiwidyIsIm1ldGEiLCJLRVkiLCJORUVEIiwiZmFzdEtleSIsImNyZWF0ZSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIlNIQVJFRCIsInN0b3JlIiwicHVzaCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJTeW1ib2wiLCJVU0VfU1lNQk9MIiwidWlkIiwiZGVmIiwiVEFHIiwiX3NldFRvU3RyaW5nVGFnIiwidGFnIiwic3RhdCIsIl93a3NEZWZpbmUiLCIkU3ltYm9sIiwiY2hhckF0Iiwid2tzRXh0IiwiX2NvZiIsInNsaWNlIiwiX2lvYmplY3QiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNvZiIsIl9kZWZpbmVkIiwiX3RvSW9iamVjdCIsIklPYmplY3QiLCJkZWZpbmVkIiwiY2VpbCIsImZsb29yIiwiX3RvSW50ZWdlciIsImlzTmFOIiwibWluIiwiX3RvTGVuZ3RoIiwidG9JbnRlZ2VyIiwibWF4IiwiX3RvQWJzb2x1dGVJbmRleCIsImluZGV4IiwiX2FycmF5SW5jbHVkZXMiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJ0b0lPYmplY3QiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsInNoYXJlZCIsIl9zaGFyZWRLZXkiLCJhcnJheUluZGV4T2YiLCJJRV9QUk9UTyIsIl9vYmplY3RLZXlzSW50ZXJuYWwiLCJuYW1lcyIsInJlc3VsdCIsIl9lbnVtQnVnS2V5cyIsIl9vYmplY3RLZXlzIiwia2V5cyIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJfaXNBcnJheSIsIkFycmF5IiwiaXNBcnJheSIsImFyZyIsIl9vYmplY3REcHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiUHJvcGVydGllcyIsImdldEtleXMiLCJfaHRtbCIsImRvY3VtZW50RWxlbWVudCIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIl9vYmplY3RDcmVhdGUiLCJkUHMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInBJRSIsIiRHT1BEIiwiJERQIiwiZ09QTkV4dCIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJ3a3MiLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJPYmplY3RQcm90byIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsIkRFU0NSSVBUT1JTIiwiJGZhaWxzIiwiX2NyZWF0ZSIsIkQiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiX2siLCJpc1N5bWJvbCIsIml0ZXJhdG9yIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJnZXRTeW1ib2xzIiwiZ09QUyIsInN5bWJvbHMiLCJlbnVtS2V5cyIsImwiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsInNldCIsInJlcXVpcmUkJDMiLCJlczZTeW1ib2xzIiwiaiIsIndlbGxLbm93blN5bWJvbHMiLCJrIiwid2tzRGVmaW5lIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJhcmdzIiwicmVxdWlyZSQkNSIsInNldFRvU3RyaW5nVGFnIiwiX29iamVjdFNhcCIsImZhaWxzIiwiX3RvT2JqZWN0IiwiX29iamVjdEdwbyIsImdldFByb3RvdHlwZU9mIiwidG9PYmplY3QiLCJjb25zdHJ1Y3RvciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCIkYXNzaWduIiwiYXNzaWduIiwiX29iamVjdEFzc2lnbiIsIkEiLCJLIiwiZm9yRWFjaCIsIlQiLCJhTGVuIiwiX3NhbWVWYWx1ZSIsIngiLCJ5IiwiY2hlY2siLCJwcm90byIsIl9zZXRQcm90byIsInNldFByb3RvdHlwZU9mIiwidGVzdCIsImJ1Z2d5IiwiX19wcm90b19fIiwiQVJHIiwiX2NsYXNzb2YiLCJ0cnlHZXQiLCJjYWxsZWUiLCJjbGFzc29mIiwiX2ludm9rZSIsInVuIiwiYXJyYXlTbGljZSIsImZhY3RvcmllcyIsIl9iaW5kIiwiYmluZCIsInBhcnRBcmdzIiwiYm91bmQiLCJsZW4iLCJuIiwiY29uc3RydWN0IiwiaW52b2tlIiwiRlByb3RvIiwibmFtZVJFIiwibWF0Y2giLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiX3N0cmluZ1dzIiwic3BhY2UiLCJzcGFjZXMiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsInN0cmluZyIsIlRZUEUiLCJyZXBsYWNlIiwiX3N0cmluZ1RyaW0iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwiaGV4IiwiX3BhcnNlSW50Iiwid3MiLCJzdHIiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIl9wYXJzZUZsb2F0IiwiSW5maW5pdHkiLCJfaW5oZXJpdElmUmVxdWlyZWQiLCJDIiwiTlVNQkVSIiwiJE51bWJlciIsIkJhc2UiLCJCUk9LRU5fQ09GIiwicmVxdWlyZSQkNCIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjaGFyQ29kZUF0IiwiTmFOIiwiY29kZSIsImRpZ2l0cyIsImluaGVyaXRJZlJlcXVpcmVkIiwicmVxdWlyZSQkNiIsIl9hTnVtYmVyVmFsdWUiLCJtc2ciLCJfc3RyaW5nUmVwZWF0IiwiY291bnQiLCJyZXMiLCJSYW5nZUVycm9yIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiZGF0YSIsIkVSUk9SIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwicyIsInQiLCJyZXBlYXQiLCJwb3ciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJhTnVtYmVyVmFsdWUiLCJtIiwieDIiLCJsb2ciLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIkVQU0lMT04iLCJfaXNGaW5pdGUiLCJpc0Zpbml0ZSIsIl9pc0ludGVnZXIiLCJpc0ludGVnZXIiLCJudW1iZXIiLCJhYnMiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJfbWF0aExvZzFwIiwibG9nMXAiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCJMTjIiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiX21hdGhTaWduIiwic2lnbiIsImNicnQiLCJjbHozMiIsIkxPRzJFIiwiY29zaCIsIiRleHBtMSIsImV4cG0xIiwiX21hdGhFeHBtMSIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJfbWF0aEZyb3VuZCIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsIlVJTlQxNiIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiX3N0cmluZ0F0IiwicG9zIiwiX2l0ZXJhdG9ycyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiX2l0ZXJDcmVhdGUiLCJDb25zdHJ1Y3RvciIsIk5BTUUiLCJuZXh0IiwiZGVzY3JpcHRvciIsIklURVJBVE9SIiwiQlVHR1kiLCJWQUxVRVMiLCJyZXR1cm5UaGlzIiwiX2l0ZXJEZWZpbmUiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiJGl0ZXJDcmVhdGUiLCJtZXRob2RzIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsIkl0ZXJhdG9ycyIsInZhbHVlcyIsIiRhdCIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsInBvaW50IiwiZG9uZSIsImNvZGVQb2ludEF0IiwiTUFUQ0giLCJfaXNSZWdleHAiLCJpc1JlZ0V4cCIsIl9zdHJpbmdDb250ZXh0Iiwic2VhcmNoU3RyaW5nIiwiX2ZhaWxzSXNSZWdleHAiLCJyZSIsIkVORFNfV0lUSCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiY29udGV4dCIsImVuZFBvc2l0aW9uIiwiZW5kIiwic2VhcmNoIiwiSU5DTFVERVMiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJTVEFSVFNfV0lUSCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsInF1b3QiLCJjcmVhdGVIVE1MIiwiYXR0cmlidXRlIiwicDEiLCJfc3RyaW5nSHRtbCIsInRvTG93ZXJDYXNlIiwiY29sb3IiLCJzaXplIiwidXJsIiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJ0b0pTT04iLCJ0b0lTT1N0cmluZyIsInB2IiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJfZGF0ZVRvSXNvU3RyaW5nIiwiZCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsIklOVkFMSURfREFURSIsImhpbnQiLCJfaXRlckNhbGwiLCJyZXQiLCJBcnJheVByb3RvIiwiX2lzQXJyYXlJdGVyIiwiX2NyZWF0ZVByb3BlcnR5IiwiY29yZV9nZXRJdGVyYXRvck1ldGhvZCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiX2l0ZXJEZXRlY3QiLCJza2lwQ2xvc2luZyIsImFyciIsIml0ZXIiLCJmcm9tIiwiYXJyYXlMaWtlIiwic3RlcCIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsImdldEl0ZXJGbiIsImlzQXJyYXlJdGVyIiwiY3JlYXRlUHJvcGVydHkiLCJvZiIsIl9zdHJpY3RNZXRob2QiLCJtZXRob2QiLCJhcnJheUpvaW4iLCJzZXBhcmF0b3IiLCJodG1sIiwiYmVnaW4iLCJrbGFzcyIsInN0YXJ0IiwidXBUbyIsImNsb25lZCIsIiRzb3J0Iiwic29ydCIsImNvbXBhcmVmbiIsIlNQRUNJRVMiLCJfYXJyYXlTcGVjaWVzQ3JlYXRlIiwib3JpZ2luYWwiLCJfYXJyYXlNZXRob2RzIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsImFzYyIsImNhbGxiYWNrZm4iLCIkZm9yRWFjaCIsIlNUUklDVCIsIiRtYXAiLCJtYXAiLCIkZmlsdGVyIiwiZmlsdGVyIiwiJHNvbWUiLCJzb21lIiwiJGV2ZXJ5IiwiZXZlcnkiLCJfYXJyYXlSZWR1Y2UiLCJtZW1vIiwiaXNSaWdodCIsInJlZHVjZSIsIiRyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsInNlYXJjaEVsZW1lbnQiLCJsYXN0SW5kZXhPZiIsIl9hcnJheUNvcHlXaXRoaW4iLCJjb3B5V2l0aGluIiwidG8iLCJpbmMiLCJVTlNDT1BBQkxFUyIsIl9hZGRUb1Vuc2NvcGFibGVzIiwiX2FycmF5RmlsbCIsImVuZFBvcyIsImZpbGwiLCIkZmluZCIsImZvcmNlZCIsImZpbmQiLCJmaW5kSW5kZXgiLCJfc2V0U3BlY2llcyIsIl9pdGVyU3RlcCIsImVzNl9hcnJheV9pdGVyYXRvciIsIkFyZ3VtZW50cyIsImFkZFRvVW5zY29wYWJsZXMiLCJfZmxhZ3MiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInAiLCJ0aVJFIiwicGlSRSIsImZpVSIsIiRmbGFncyIsInByb3h5IiwiZmxhZ3MiLCJkZWZpbmUiLCJfZml4UmVXa3MiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCIkbWF0Y2giLCJyZWdleHAiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJTUExJVCIsIiRzcGxpdCIsIl9zcGxpdCIsIiRwdXNoIiwiJFNQTElUIiwiTEVOR1RIIiwiTEFTVF9JTkRFWCIsIk5QQ0ciLCJsaW1pdCIsInNlcGFyYXRvcjIiLCJsYXN0SW5kZXgiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5IiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsIl9hbkluc3RhbmNlIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiX3NwZWNpZXNDb25zdHJ1Y3RvciIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsIm5leHRUaWNrIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJjZWwiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJfdGFzayIsImNsZWFyIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJfbWljcm90YXNrIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsIm5hdmlnYXRvciIsInN0YW5kYWxvbmUiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInRhc2siLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJfcGVyZm9ybSIsInYiLCJfdXNlckFnZW50IiwidXNlckFnZW50IiwiX3Byb21pc2VSZXNvbHZlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIl9yZWRlZmluZUFsbCIsIm1pY3JvdGFzayIsIlBST01JU0UiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwicGVyZm9ybSIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsImVycm9yIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX2QiLCJfdyIsIiRyZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwiYW5JbnN0YW5jZSIsImVyciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsInNwZWNpZXNDb25zdHJ1Y3RvciIsImNhdGNoIiwiciIsImNhcGFiaWxpdHkiLCJwcm9taXNlUmVzb2x2ZSIsInJlcXVpcmUkJDciLCJhbGwiLCJyZW1haW5pbmciLCJmb3JPZiIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiX3ZhbGlkYXRlQ29sbGVjdGlvbiIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJfY29sbGVjdGlvblN0cm9uZyIsImdldENvbnN0cnVjdG9yIiwiQURERVIiLCJfbCIsInJlZGVmaW5lQWxsIiwidmFsaWRhdGUiLCJkZWxldGUiLCJwcmV2Iiwic2V0U3Ryb25nIiwiJGl0ZXJEZWZpbmUiLCJzZXRTcGVjaWVzIiwiX2NvbGxlY3Rpb24iLCJjb21tb24iLCJJU19XRUFLIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIiRpdGVyRGV0ZWN0IiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImVzNl9tYXAiLCJzdHJvbmciLCJlczZfc2V0IiwiYWRkIiwiYXJyYXlGaW5kIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJhcnJheUZpbmRJbmRleCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwic3BsaWNlIiwiX2NvbGxlY3Rpb25XZWFrIiwiJGhhcyIsInVmc3RvcmUiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJXRUFLX01BUCIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIldFQUtfU0VUIiwiVHlwZWQiLCJUWVBFRCIsIlZJRVciLCJBQlYiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3IiwiQ09OU1RSIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIl90eXBlZCIsIl90b0luZGV4IiwiQVJSQVlfQlVGRkVSIiwiREFUQV9WSUVXIiwiV1JPTkdfSU5ERVgiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJCYXNlQnVmZmVyIiwiQllURV9MRU5HVEgiLCJCWVRFX09GRlNFVCIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImJ1ZmZlciIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsImFkZEdldHRlciIsImludGVybmFsIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJ0b0luZGV4IiwiX2IiLCJwYWNrIiwicmV2ZXJzZSIsImNvbnZlcnNpb24iLCIkdHlwZWQiLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsImJ5dGVPZmZzZXQiLCJzZXRVaW50OCIsImJ5dGVMZW5ndGgiLCJhcnJheUZpbGwiLCJidWZmZXJMZW5ndGgiLCJvZmZzZXQiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIiRpc1ZpZXciLCJpc1ZpZXciLCIkc2xpY2UiLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwiJGJ1ZmZlciIsInJlcXVpcmUkJDgiLCJwcm9wZXJ0eURlc2MiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsInJlcXVpcmUkJDIxIiwicmVxdWlyZSQkMjIiLCJyZXF1aXJlJCQyMyIsInJlcXVpcmUkJDI0IiwicmVxdWlyZSQkMjUiLCJyZXF1aXJlJCQyNiIsInJlcXVpcmUkJDI3IiwicmVxdWlyZSQkMjgiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwicmVxdWlyZSQkMjkiLCJyZXF1aXJlJCQzMCIsIkFycmF5SXRlcmF0b3JzIiwicmVxdWlyZSQkMzEiLCJyZXF1aXJlJCQzMiIsInJlcXVpcmUkJDMzIiwicmVxdWlyZSQkMzQiLCJyZXF1aXJlJCQzNSIsImFycmF5Q29weVdpdGhpbiIsInJlcXVpcmUkJDM2IiwicmVxdWlyZSQkMzciLCJyZXF1aXJlJCQzOCIsIlVpbnQ4QXJyYXkiLCJTSEFSRURfQlVGRkVSIiwiQllURVNfUEVSX0VMRU1FTlQiLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb3J0IiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIlRZUEVEX0FSUkFZIiwiV1JPTkdfTEVOR1RIIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsIiRmcm9tIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByZWRpY2F0ZSIsIm1pZGRsZSIsInN1YmFycmF5IiwiJGJlZ2luIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJUQUMiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsIm8iLCJyb3VuZCIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiJGxlbiIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwiaW5pdCIsInJBcHBseSIsIlJlZmxlY3QiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJfb3duS2V5cyIsIm93bktleXMiLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJfZmxhdHRlbkludG9BcnJheSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImZsYXRNYXAiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCJhdCIsIl9zdHJpbmdQYWQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwicGFkU3RhcnQiLCIkcGFkIiwicGFkRW5kIiwiUmVnRXhwUHJvdG8iLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJfciIsIm1hdGNoQWxsIiwiZ2V0RmxhZ3MiLCJyeCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiX29iamVjdFRvQXJyYXkiLCJpc0VudHJpZXMiLCIkdmFsdWVzIiwiX29iamVjdEZvcmNlZFBhbSIsIl9fZGVmaW5lU2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiZ2V0dGVyIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJfYXJyYXlGcm9tSXRlcmFibGUiLCJfY29sbGVjdGlvblRvSnNvbiIsIl9zZXRDb2xsZWN0aW9uT2YiLCJDT0xMRUNUSU9OIiwiX3NldENvbGxlY3Rpb25Gcm9tIiwiY2IiLCJuZXh0SXRlbSIsImlzRXJyb3IiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsIl9tYXRoU2NhbGUiLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCJpc3ViaCIsImltdWxoIiwidSIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsInVtdWxoIiwic2lnbmJpdCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0cnkiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJNYXAiLCJrZXlNZXRhZGF0YSIsIl9tZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsInRvTWV0YUtleSIsIm1ldGFkYXRhIiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiU2V0IiwiZ2V0TWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiaGFzTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIiRtZXRhZGF0YSIsImFzYXAiLCJPQlNFUlZBQkxFIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJzdWJzY3JpcHRpb25DbG9zZWQiLCJfbyIsImNsb3NlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwib2JzZXJ2ZXIiLCJzdWJzY3JpYmVyIiwiU3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsImNvbXBsZXRlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvYnNlcnZhYmxlIiwiaXRlbXMiLCJPYnNlcnZhYmxlIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIiR0YXNrIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJzdG9wIiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJFcnJvciIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImFmdGVyTG9jIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwic3RhdGUiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm9iaiIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmV0dXJuIiwiaW5mbyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsInJlZ0V4cCIsIiRyZSIsInBhcnQiLCJlc2NhcGUiLCJfYmFiZWxQb2x5ZmlsbCIsImZldGNoIiwic3VwcG9ydCIsIkJsb2IiLCJ2aWV3Q2xhc3NlcyIsImlzRGF0YVZpZXciLCJpc1Byb3RvdHlwZU9mIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJIZWFkZXJzIiwiYXBwZW5kIiwibm9ybWFsaXplTmFtZSIsIm5vcm1hbGl6ZVZhbHVlIiwib2xkVmFsdWUiLCJjYWxsYmFjayIsIml0ZXJhdG9yRm9yIiwiUmVxdWVzdCIsImNsb25lIiwiYm9keSIsIl9ib2R5SW5pdCIsIkJvZHkiLCJSZXNwb25zZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJoZWFkZXJzIiwicmVzcG9uc2UiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJsb2NhdGlvbiIsImlucHV0IiwicmVxdWVzdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25sb2FkIiwicmF3SGVhZGVycyIsIm9wdGlvbnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJsaW5lIiwicGFydHMiLCJzaGlmdCIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsIm9udGltZW91dCIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJwb2x5ZmlsbCIsImhlYWRlciIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJibG9iIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJfaW5pdEJvZHkiLCJfYm9keVRleHQiLCJfYm9keUJsb2IiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJfYm9keUFycmF5QnVmZmVyIiwicmVqZWN0ZWQiLCJhcnJheUJ1ZmZlciIsInRleHQiLCJyZWFkQXNUZXh0IiwiY2hhcnMiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJmb3JtRGF0YSIsImRlY29kZSIsImpzb24iLCJwYXJzZSIsInVwY2FzZWQiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiZm9ybSIsImRlY29kZVVSSUNvbXBvbmVudCIsImJvZHlJbml0IiwibWFzayIsIm1hdHJpeCIsImRlZmF1bHRWYWx1ZSIsInNldEN1c3RvbVZhbGlkaXR5IiwiZWxlbSIsImZvY3VzIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJyYW5nZSIsImNvbGxhcHNlIiwibW92ZUVuZCIsIm1vdmVTdGFydCIsInNlbGVjdCIsInNldEN1cnNvclBvc2l0aW9uIiwiY2hlY2tNYWlsIiwicXVlcnlTZWxlY3RvciIsIm1lc3NhZ2UiLCJwYXJlbnROb2RlIiwicmVnUGF0dGVybiIsInNldEF0dHJpYnV0ZSIsImluc2VydEFkamFjZW50SFRNTCIsImNoZWNrTmFtZSIsImNoZWNrUGhvbmUiLCJzaG93RXJyb3IiLCJzaG93RGF0YSIsImNoZWNrU3RhdHVzIiwib25TdWNjZXNzIiwiYnV0dG9uQ29udGFjdCIsImdldEVsZW1lbnRGcm9tVGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsImNvbnRhaW5lciIsImlubmVySFRNTCIsImNoaWxkcmVuIiwiaGlkZU1vZGFsIiwibW9kYWxPdmVybGF5IiwibW9kYWwiLCJjbGFzc0xpc3QiLCJvblBvcEVzY1ByZXNzIiwiZXZ0Iiwia2V5Q29kZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbk92ZXJsYXlQcmVzcyIsImluc2VydEFkamFjZW50RWxlbWVudCIsImlucHV0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbG9zZUJ1dHRvbiIsInN1Ym1pdEJ1dHRvbiIsInBob25lIiwibWFpbCIsInByZXZlbnREZWZhdWx0IiwiY2hlY2tWYWxpZGl0eSIsIkNvbnRlbnQtVHlwZSJdLCJtYXBwaW5ncyI6InNOQUNBLElBQUlBLEVBQVNDLEVBQUFDLFFBQWtDLG9CQUFWQyxRQUF5QkEsT0FBT0MsTUFBUUEsS0FDekVELE9BQXdCLG9CQUFSRSxNQUF1QkEsS0FBS0QsTUFBUUEsS0FBT0MsS0FFM0RDLFNBQVMsY0FBVEEsR0FDYyxpQkFBUEMsTUFBaUJBLElBQU1QLEtDTDlCUSxFQUFpQixHQUFHQSxlQUN4QkMsR0FBaUIsU0FBVUMsRUFBSUMsR0FDN0IsT0FBT0gsRUFBZUksS0FBS0YsRUFBSUMsSUNGakNFLEdBQWlCLFNBQVVDLEdBQ3pCLElBQ0UsUUFBU0EsSUFDVCxNQUFPQyxHQUNQLE9BQU8sSUNIWEMsSUFBa0JDLEdBQW9CLFdBQ3BDLE9BQStFLEdBQXhFQyxPQUFPQyxlQUFlLEdBQUksSUFBSyxDQUFFQyxJQUFLLFdBQWMsT0FBTyxLQUFRQyxvQkNGNUUsSUFBSUMsRUFBT3JCLEVBQUFDLFFBQWlCLENBQUVxQixRQUFTLFNBQ3JCLGlCQUFQQyxNQUFpQkEsSUFBTUYsS0NEbENHLGNBQWlCLFNBQVVmLEdBQ3pCLE1BQXFCLGlCQUFQQSxFQUF5QixPQUFQQSxFQUE0QixtQkFBUEEsSUNBdkRnQixFQUFpQixTQUFVaEIsR0FDekIsSUFBS2lCLEdBQVNqQixHQUFLLE1BQU1rQixVQUFVbEIsRUFBSyxzQkFDeEMsT0FBT0EsR0NGTG1C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QXBCLGNBQUEsVThUeUVNaUMsRUFBT2IsRUFBTXBCLGNBQWMsU0FDM0JqMEMsRUFBT3ExQyxFQUFNcEIsY0FBYyxTQUVqQy8zQyxTQUFTNHFCLGlCQUFULFVBQXFDeXVCLEk3VDNGdkNGLEVBQUFwQixjQUFpQixVQUFVbnRCLGlCQUFlLFFBQUFvc0IsSUFBQSxHNlQ4RnhDK0MsRTdUN0ZBbnZCLGlCQUFPLE9BQUEwdEIsSUFBQSxHNlQ4RlAwQixFN1Q3RkVwdkIsaUJBQWMsT0FBV2t0QixJQUFBLEc2VDhGM0JoMEMsRTdUN0ZFOG1CLGlCQUFnQixPQUFXeXRCLElBQUEsRzZUK0Y3QmEsRTdUN0ZTdHVCLGlCNlQ2RlQsUTdUN0ZjNnVCLElBRWZJLEVBQUNqdkIsaUJBQUQsUUFBQyxXNlQ4RkVxdUIsTzVUakdIYSxFQUFhbHZCLGlCQUFiLFFBQWlDLFNBQUFOLEdBQ2hDQSxFQUFPMnZCLGlCQUNQLElBQU8zRCxFQUFPNkMsRUFBQXBCLGNBQUEseUJDRmQsR0RHQWdDLEVBQUFudkIsaUJBQUEsT0FBQTB0QixNQUFBLEc0VHFHRTBCLEVBQUtwdkIsaUJBQWlCLE9BQVFrdEIsTUFBYSxHM1Q1Ry9DaDBDLEVBQU04bUIsaUJBQUssT0FBQXl0QixNQUFBLEdBQ1N6dUMsTUFBRzZYLEtBQUFrNEIsR0FBQXIxQixNQUFBLFNBQUFpZCxHQUN2QixPQUFnQyxJQUFmQSxFQUFBMlksa0JBRWYsQzJUOEdJLElBQU0vakMsRUFBTyxJQUFJeS9CLFNBQVNVLEdEbEY5QnhFLE1BQUFBLDRCQVJ3QixDQUN0QmdCLEtDMEZhMzhCLEVEekZiaTlCLFFBQVMsQ0FDUCtHLGVBQUEsdUJBRUYvM0IsT0FBQUEsU0FJQ2tLLEtBQUttc0IsSUFDTC9uQixNQUFNNm5CLEl6VC9CUFUiLCJmaWxlIjoibW9kYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjcnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuICB2YXIgZm5zID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pO1xuICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gIHZhciByeGZuID0gZm5zWzFdO1xuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSkge1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNzsgfSkpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXR0ZW4nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBnZXRGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGwgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYgKCFpc1JlZ0V4cChyZWdleHApKSB0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgdmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApO1xuICAgIHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtTZXQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICBpZiAoXG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgeCAhPSB4XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5IaWdoICE9IGluSGlnaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0O1xuXG5tZXRhZGF0YS5leHAoeyBkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9lczYuc2V0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbnZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAoTywgUCkge1xuICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZiAocGFyZW50ID09PSBudWxsKSByZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlZ0V4cCwgcmVwbGFjZSkge1xuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmUgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHsgcmV0dXJuICRyZShpdCk7IH0gfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwiKGZ1bmN0aW9uKHNlbGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gICAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG4gIH1cblxuICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICAgIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICAgIF1cblxuICAgIHZhciBpc0RhdGFWaWV3ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbiAgICB9XG5cbiAgICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVyYXRvclxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUrJywnK3ZhbHVlIDogdmFsdWVcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2gobmFtZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkgeyBpdGVtcy5wdXNoKHZhbHVlKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgICB9XG4gICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gICAgfVxuICAgIHJldHVybiBjaGFycy5qb2luKCcnKVxuICB9XG5cbiAgZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gICAgaWYgKGJ1Zi5zbGljZSkge1xuICAgICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgQm9keUluaXQgdHlwZScpXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgICAgfVxuICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywgeyBib2R5OiB0aGlzLl9ib2R5SW5pdCB9KVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgYm9keS50cmltKCkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAgIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICAgIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gICAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgICB9KVxuICB9XG4gIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG4iLCJjb25zdCBzZXRDdXJzb3JQb3NpdGlvbiA9IChwb3MsIGVsZW0pID0+IHtcbiAgZWxlbS5mb2N1cygpO1xuICBpZiAoZWxlbS5zZXRTZWxlY3Rpb25SYW5nZSkge1xuICAgIGVsZW0uc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xuICB9IGVsc2UgaWYgKGVsZW0uY3JlYXRlVGV4dFJhbmdlKSB7XG4gICAgY29uc3QgcmFuZ2UgPSBlbGVtLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgIHJhbmdlLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIiwgcG9zKTtcbiAgICByYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgcG9zKTtcbiAgICByYW5nZS5zZWxlY3QoKTtcbiAgfVxufTtcblxuY29uc3QgbWFzayA9IChldmVudCkgPT4ge1xuICBjb25zdCBtYXRyaXggPSBgKzcgKF9fXykgX19fLV9fLV9fYDtcbiAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQ7XG4gIGxldCBkZWZhdWx0VmFsdWUgPSBtYXRyaXgucmVwbGFjZSgvXFxEL2csIGBgKTtcbiAgbGV0IHZhbCA9IGlucHV0LnZhbHVlLnJlcGxhY2UoL1xcRC9nLCBgYCk7XG4gIGxldCBpID0gMDtcblxuICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShgYCk7XG5cbiAgLy8gU2V0dGluZyB0byBkZWZhdWx0IGlmIDEgdmFsdWVcbiAgaWYgKGRlZmF1bHRWYWx1ZS5sZW5ndGggPj0gdmFsLmxlbmd0aCkge1xuICAgIHZhbCA9IGRlZmF1bHRWYWx1ZTtcbiAgIH1cblxuICAvLyBNb2RpZnlpbmcgbWFza1xuICBpbnB1dC52YWx1ZSA9IG1hdHJpeC5yZXBsYWNlKC8uL2csIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBpZiAoL1tfXFxkXS8udGVzdChlbGVtZW50KSAmJiBpIDwgdmFsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHZhbC5jaGFyQXQoaSsrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGkgPj0gdmFsLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gYGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBzZXRDdXJzb3JQb3NpdGlvbihpbnB1dC52YWx1ZS5sZW5ndGgsIGlucHV0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hc2s7XG4iLCJjb25zdCBjaGVja01haWwgPSAoKSA9PiB7XG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI21haWxgKTtcbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5lcnJvcl9fbWVzc2FnZS0tbWFpbGApKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5lcnJvcl9fbWVzc2FnZS0tbWFpbGApO1xuICAgIGNvbnN0IHBhcmVudCA9IG1lc3NhZ2UucGFyZW50Tm9kZTtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobWVzc2FnZSk7XG4gIH1cbiAgY29uc3QgcmVnUGF0dGVybiA9IGBeW0EtWmEtejAtOV1bQS1aYS16MC05XFwuXFwtX10qW0EtWmEtejAtOV0qQChbQS1aYS16MC05XSsoW0EtWmEtejAtOS1dKltBLVphLXowLTldKykqXFwuKStbQS1aYS16XSokYDtcbiAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoYGApO1xuICBpZiAoIWlucHV0LnZhbHVlKSB7XG4gICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoYNCf0L7Qu9C1INC90LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINC/0YPRgdGC0YvQvGApO1xuICAgIGlucHV0LnNldEF0dHJpYnV0ZShgc3R5bGVgLCBgYm9yZGVyOiAycHggc29saWQgcmdiKDI1NSwgMCwgMClgKTtcbiAgICBpbnB1dC5pbnNlcnRBZGphY2VudEhUTUwoYGFmdGVyZW5kYCwgYDxwIGNsYXNzPVwiZXJyb3JfX21lc3NhZ2UgZXJyb3JfX21lc3NhZ2UtLW1haWxcIj7Qn9C+0LvQtSDQvdC1INC00L7Qu9C20L3QviDQsdGL0YLRjCDQv9GD0YHRgtGL0Lw8L3A+YCk7XG4gIH0gZWxzZSBpZiAoIWlucHV0LnZhbHVlLm1hdGNoKHJlZ1BhdHRlcm4pKSB7XG4gICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoYNCj0LrQsNC20LjRgtC1INC60L7RgNGA0LXQutGC0L3Ri9C5IGUtbWFpbGApO1xuICAgIGlucHV0LnNldEF0dHJpYnV0ZShgc3R5bGVgLCBgYm9yZGVyOiAycHggc29saWQgcmdiKDI1NSwgMCwgMClgKTtcbiAgICBpbnB1dC5pbnNlcnRBZGphY2VudEhUTUwoYGFmdGVyZW5kYCwgYDxwIGNsYXNzPVwiZXJyb3JfX21lc3NhZ2UgZXJyb3JfX21lc3NhZ2UtLW1haWxcIj7Qo9C60LDQttC40YLQtSDQutC+0YDRgNC10LrRgtC90YvQuSBlLW1haWw8L3A+YCk7XG4gIH0gZWxzZSB7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKGBzdHlsZWAsIGBib3JkZXI6IDJweCBzb2xpZCByZ2IoMCwgMjU1LCAwKWApO1xuICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KGBgKTtcbiAgfVxufTtcblxuY29uc3QgY2hlY2tOYW1lID0gKCkgPT4ge1xuICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNuYW1lYCk7XG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZXJyb3JfX21lc3NhZ2UtLW5hbWVgKSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZXJyb3JfX21lc3NhZ2UtLW5hbWVgKTtcbiAgICBjb25zdCBwYXJlbnQgPSBtZXNzYWdlLnBhcmVudE5vZGU7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKG1lc3NhZ2UpO1xuICB9XG4gIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KGBgKTtcbiAgaWYgKCFpbnB1dC52YWx1ZSkge1xuICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KGDQn9C+0LvQtSDQvdC1INC00L7Qu9C20L3QviDQsdGL0YLRjCDQv9GD0YHRgtGL0LxgKTtcbiAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoYHN0eWxlYCwgYGJvcmRlcjogMnB4IHNvbGlkIHJnYigyNTUsIDAsIDApYCk7XG4gICAgaW5wdXQuaW5zZXJ0QWRqYWNlbnRIVE1MKGBhZnRlcmVuZGAsIGA8cCBjbGFzcz1cImVycm9yX19tZXNzYWdlIGVycm9yX19tZXNzYWdlLS1uYW1lXCI+0J/QvtC70LUg0L3QtSDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8PC9wPmApO1xuICB9IGVsc2Uge1xuICAgIGlucHV0LnNldEF0dHJpYnV0ZShgc3R5bGVgLCBgYm9yZGVyOiAycHggc29saWQgcmdiKDAsIDI1NSwgMClgKTtcbiAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShgYCk7XG4gIH1cbn07XG5cbmNvbnN0IGNoZWNrUGhvbmUgPSAoKSA9PiB7XG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3Bob25lYCk7XG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZXJyb3JfX21lc3NhZ2UtLXBob25lYCkpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmVycm9yX19tZXNzYWdlLS1waG9uZWApO1xuICAgIGNvbnN0IHBhcmVudCA9IG1lc3NhZ2UucGFyZW50Tm9kZTtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobWVzc2FnZSk7XG4gIH1cbiAgY29uc3QgTUFYX0xFTkdUSCA9IDE4O1xuICBjb25zdCBNSU5fTEVOR1RIID0gMjtcbiAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoYGApO1xuICBpZiAoaW5wdXQudmFsdWUubGVuZ3RoID09PSBNSU5fTEVOR1RIKSB7XG4gICAgaW5wdXQudmFsdWUgPSBgYDtcbiAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShg0J/QvtC70LUg0L3QtSDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8YCk7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKGBzdHlsZWAsIGBib3JkZXI6IDJweCBzb2xpZCByZ2IoMjU1LCAwLCAwKWApO1xuICAgIGlucHV0Lmluc2VydEFkamFjZW50SFRNTChgYWZ0ZXJlbmRgLCBgPHAgY2xhc3M9XCJlcnJvcl9fbWVzc2FnZSBlcnJvcl9fbWVzc2FnZS0tcGhvbmVcIj7Qn9C+0LvQtSDQvdC1INC00L7Qu9C20L3QviDQsdGL0YLRjCDQv9GD0YHRgtGL0Lw8L3A+YCk7XG4gIH0gZWxzZSBpZiAoaW5wdXQudmFsdWUubGVuZ3RoIDwgTUFYX0xFTkdUSCkge1xuICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KGDQo9C60LDQttC40YLQtSDQutC+0YDRgNC10LrRgtC90YvQuSDQvdC+0LzQtdGAYCk7XG4gICAgaW5wdXQuaW5zZXJ0QWRqYWNlbnRIVE1MKGBhZnRlcmVuZGAsIGA8cCBjbGFzcz1cImVycm9yX19tZXNzYWdlIGVycm9yX19tZXNzYWdlLS1waG9uZVwiPtCj0LrQsNC20LjRgtC1INC60L7RgNGA0LXQutGC0L3Ri9C5INC90L7QvNC10YA8L3A+YCk7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKGBzdHlsZWAsIGBib3JkZXI6IDJweCBzb2xpZCByZ2IoMjU1LCAwLCAwKWApO1xuICB9IGVsc2Uge1xuICAgIGlucHV0LnNldEF0dHJpYnV0ZShgc3R5bGVgLCBgYm9yZGVyOiAycHggc29saWQgcmdiKDAsIDI1NSwgMClgKTtcbiAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShgYCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7Y2hlY2tOYW1lLCBjaGVja01haWwsIGNoZWNrUGhvbmV9O1xuIiwiLy8gQXBwbHlpbmcgdG8gRE9NXG5jb25zdCBzaG93RGF0YSA9IChyZXMpID0+IHtcbiAgY29uc3QgbmV3c0Jsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYm9keWApO1xuICBuZXdzQmxvY2suaW5zZXJ0QWRqYWNlbnRIVE1MKGBhZnRlckJlZ2luYCwgcmVzKTtcbn07XG5cbi8vIFNob3dpbmcgZXJyb3JcbmNvbnN0IHNob3dFcnJvciA9IChlcnJvcikgPT4ge1xuICByZXR1cm4gc2hvd0RhdGEoYDxkaXYgY2xhc3M9XCJlcnJvclwiPlxuICAgICAgICA8cCBjbGFzcz1cImVycm9yXCI+0J/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsCAke2Vycm9yfSA9KDwvcD5cbiAgICAgICAgPHAgY2xhc3M9XCJlcnJvclwiPtCf0L7QttCw0LvRg9C50YHRgtCwLCDQv9C+0L/RgNC+0LHRg9C50YLQtSDQv9C10YDQtdC30LDQs9GA0YPQt9C40YLRjCDRgdGC0YDQsNC90LjRhtGDLjwvcD5cbiAgICAgIDwvZGl2PmApO1xufTtcblxuY29uc3QgY2hlY2tTdGF0dXMgPSAocmVzcG9uc2UpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChvblN1Y2Nlc3MpID0+IHtcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIG9uU3VjY2VzcyhyZXNwb25zZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIFJlc3VsdCBQT1NUXG5jb25zdCB1cGxvYWREYXRhID0gKGRhdGEpID0+IHtcbiAgY29uc3QgcmVxdWVzdFNldHRpbmdzID0ge1xuICAgIGJvZHk6IGRhdGEsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6IGBtdWx0aXBhcnQvZm9ybS1kYXRhYFxuICAgIH0sXG4gICAgbWV0aG9kOiBgUE9TVGBcbiAgfTtcblxuICBmZXRjaChgaHR0cDovL2RhdGUuanNvbnRlc3QuY29tL2AsIHJlcXVlc3RTZXR0aW5ncylcbiAgICAudGhlbihjaGVja1N0YXR1cylcbiAgICAuY2F0Y2goc2hvd0Vycm9yKTtcbiB9O1xuXG5leHBvcnQgZGVmYXVsdCB1cGxvYWREYXRhO1xuIiwiaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCc7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5pbXBvcnQgbWFzayBmcm9tICcuL3Bob25lLW1hc2suanMnO1xuaW1wb3J0IHtjaGVja05hbWUsIGNoZWNrTWFpbCwgY2hlY2tQaG9uZX0gZnJvbSAnLi92YWxpZGF0aW9uLmpzJztcbmltcG9ydCB1cGxvYWREYXRhIGZyb20gJy4vdXBsb2FkZXIuanMnO1xuXG5jb25zdCBidXR0b25Db250YWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLnByb21vX19idXR0b25gKTtcbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBib2R5YCk7XG5jb25zdCBFU0NfS0VZQ09ERSA9IDI3O1xuXG5jb25zdCBtb2RhbFRlbXBsYXRlID0gKCkgPT4ge1xuICByZXR1cm4gYDxkaXYgY2xhc3M9XCJtb2RhbC1wb3B1cFwiPlxuICAgIDxidXR0dG9uIGNsYXNzPVwibW9kYWwtcG9wdXBfX2Nsb3NlXCI+0JfQsNC60YDRi9GC0Yw8L2J1dHR0b24+XG4gICAgPGgyIGNsYXNzPVwibW9kYWwtcG9wdXBfX2hlYWRlclwiPtCX0LDQv9C+0LvQvdC40YLQtSDRhNC+0YDQvNGDPC9oMj5cbiAgICA8Zm9ybSBjbGFzcz1cIm1vZGFsLXBvcHVwX193cmFwcGVyXCIgbWV0aG9kPVwicG9zdFwiIGVuY3R5cGU9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtcG9wdXBfX2dyb3VwXCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cIm1vZGFsLXBvcHVwX19sYWJlbFwiIGZvcj1cIm5hbWVcIj7QmNC80Y88L2xhYmVsPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJtb2RhbC1wb3B1cF9faW5wdXRcIiB0eXBlPVwidGV4dFwiIGlkPVwibmFtZVwiIG5hbWU9XCJuYW1lXCIgcGxhY2Vob2xkZXI9XCLQmtCw0Log0Log0JLQsNC8INC80L7QttC90L4g0L7QsdGA0LDRidCw0YLRjNGB0Y9cIiByZXF1aXJlZD1cInRydWVcIj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLXBvcHVwX19ncm91cFwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJtb2RhbC1wb3B1cF9fbGFiZWxcIiBmb3I9XCJwaG9uZVwiPtCi0LXQu9C10YTQvtC9PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwibW9kYWwtcG9wdXBfX2lucHV0XCIgdHlwZT1cInRleHRcIiBpZD1cInBob25lXCIgbmFtZT1cInBob25lXCIgcGxhY2Vob2xkZXI9XCIrNyhfX18pX19fLV9fLV9fXCIgcmVxdWlyZWQ9XCJ0cnVlXCI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1wb3B1cF9fZ3JvdXBcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwibW9kYWwtcG9wdXBfX2xhYmVsXCIgZm9yPVwibWFpbFwiPkUtbWFpbDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cIm1vZGFsLXBvcHVwX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgaWQ9XCJtYWlsXCIgbmFtZT1cIm1haWxcIiBwbGFjZWhvbGRlcj1cItCj0LrQsNC20LjRgtC1IGUtbWFpbFwiIHJlcXVpcmVkPVwidHJ1ZVwiPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtcG9wdXBfX2dyb3VwIG1vZGFsLXBvcHVwX19ncm91cC0td2lkZVwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJtb2RhbC1wb3B1cF9fbGFiZWxcIiBmb3I9XCJ0ZXh0XCI+0KHQvtC+0LHRidC10L3QuNC1PC9sYWJlbD5cbiAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwibW9kYWwtcG9wdXBfX2lucHV0XCIgdHlwZT1cInRleHRcIiBpZD1cInRleHRcIiBuYW1lPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwi0KLQtdC60YHRgiDRgdC+0L7QsdGJ0LXQvdC40Y9cIj48L3RleHRhcmVhPlxuICAgICAgPC9kaXY+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwibWFpbi1idXR0b24gbW9kYWwtcG9wdXBfX3N1Ym1pdFwiIHR5cGU9XCJzdWJtaXRcIj7QntGC0L/RgNCw0LLQuNGC0Yw8L2J1dHRvbj5cbiAgICA8L2Zvcm0+XG4gIDwvZGl2PmA7XG59O1xuXG5jb25zdCBtb2RhbE92ZXJsYXlUZW1wbGF0ZSA9ICgpID0+IHtcbiAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwibW9kYWwtb3ZlcmxheVwiPjwvZGl2PmA7XG59O1xuXG4vLyBGdW5jdGlvbiB0byBjcmVhdGUgYSBub2RlIGZyb20gaHRtbCB0ZW1wbGF0ZVxuY29uc3QgZ2V0RWxlbWVudEZyb21UZW1wbGF0ZSA9ICh0ZW1wbGF0ZSkgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBkaXZgKTtcbiAgY29udGFpbmVyLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAvLyBHZXR0aW5nIHJpZCBvZiBkaXYgY29udGFpbmVyXG4gIGNvbnN0IHJlc3VsdGluZ0VsZW1lbnQgPSBjb250YWluZXIuY2hpbGRyZW5bMF07XG4gIHJldHVybiByZXN1bHRpbmdFbGVtZW50O1xufTtcblxuLy8gRnVuY3Rpb24gdG8gaGlkZSBtb2RhbFxuY29uc3QgaGlkZU1vZGFsID0gKCkgPT4ge1xuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5tb2RhbC1wb3B1cGApO1xuICBjb25zdCBtb2RhbE92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAubW9kYWwtb3ZlcmxheWApO1xuICBtb2RhbC5jbGFzc0xpc3QuYWRkKCdtb2RhbC1wb3B1cC0tY2xvc2UnKTtcbiAgbW9kYWxPdmVybGF5LmNsYXNzTGlzdC5hZGQoJ21vZGFsLW92ZXJsYXktLWNsb3NlJyk7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGJvZHkucmVtb3ZlQ2hpbGQobW9kYWwpO1xuICAgIGJvZHkucmVtb3ZlQ2hpbGQobW9kYWxPdmVybGF5KTtcbiAgfSwgNDAwKTtcbn07XG5cbi8vIEZ1bmN0aW9uIHRvIGRlbGV0ZSBwb3B1cCBhdCBjcm9zcyBzaWduXG5jb25zdCBvblBvcEVzY1ByZXNzID0gKGV2dCkgPT4ge1xuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5tb2RhbGApO1xuICBpZiAobW9kYWwgJiYgZXZ0LmtleUNvZGUgPT09IEVTQ19LRVlDT0RFKSB7XG4gICAgaGlkZU1vZGFsKCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihga2V5ZG93bmAsIG9uUG9wRXNjUHJlc3MpO1xuICB9XG59O1xuXG4vLyBGdW5jdGlvbiB0byBkZWxldGUgcG9wdXAgYXQgb3ZlcmxheSBjbGlja1xuY29uc3Qgb25PdmVybGF5UHJlc3MgPSAoKSA9PiB7XG4gIGhpZGVNb2RhbCgpO1xufTtcblxuLy8gSWYgY2xpY2tpbmcgY29udGFjdCBidXR0b25cbmJ1dHRvbkNvbnRhY3QuYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBmdW5jdGlvbigpIHtcbiAgLy8gQ29uc3RydWN0aW5nIG5vZGVzXG4gIGNvbnN0IG1vZGFsID0gZ2V0RWxlbWVudEZyb21UZW1wbGF0ZShtb2RhbFRlbXBsYXRlKCkpO1xuICBjb25zdCBtb2RhbE92ZXJsYXkgPSBnZXRFbGVtZW50RnJvbVRlbXBsYXRlKG1vZGFsT3ZlcmxheVRlbXBsYXRlKCkpO1xuICAvLyBBcHBlbmRpbmcgdG8gRE9NXG4gIGJvZHkuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KGBiZWZvcmVFbmRgLCBtb2RhbCk7XG4gIGJvZHkuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KGBiZWZvcmVFbmRgLCBtb2RhbE92ZXJsYXkpO1xuICAvLyBTZXR0aW5nIHZhcmlhYmxlc1xuICBjb25zdCBpbnB1dHMgPSBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKGBpbnB1dGApO1xuICBjb25zdCBjbG9zZUJ1dHRvbiA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoYC5tb2RhbC1wb3B1cF9fY2xvc2VgKTtcbiAgY29uc3Qgc3VibWl0QnV0dG9uID0gbW9kYWwucXVlcnlTZWxlY3RvcihgLm1vZGFsLXBvcHVwX19zdWJtaXRgKTtcbiAgY29uc3QgcGhvbmUgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcjcGhvbmUnKTtcbiAgY29uc3QgbWFpbCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJyNtYWlsJyk7XG4gIGNvbnN0IG5hbWUgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcjbmFtZScpO1xuICAvLyBDbG9zaW5nIHRoZSBtb2RhbCBhdCBFU0NcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihga2V5ZG93bmAsIG9uUG9wRXNjUHJlc3MpO1xuICAvLyBWYWxpZGF0aW9uXG4gIG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJyNwaG9uZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgbWFzaywgZmFsc2UpO1xuICBwaG9uZS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgY2hlY2tQaG9uZSwgZmFsc2UpO1xuICBtYWlsLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBjaGVja01haWwsIGZhbHNlKTtcbiAgbmFtZS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgY2hlY2tOYW1lLCBmYWxzZSk7XG4gIC8vIENsb3NpbmcgYXQgb3ZlcmxheSBjbGlja1xuICBtb2RhbE92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBvbk92ZXJsYXlQcmVzcyk7XG4gIC8vIENsb3NpbmcgdGhlIG1vZGFsIGF0IGNyb3NzIHNpZ25cbiAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBmdW5jdGlvbigpIHtcbiAgICBoaWRlTW9kYWwoKTtcbiAgfSk7XG4gIC8vIENsb3NpbmcgdGhlIG1vZGFsIGF0IHN1Ym1pdFxuICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZm9ybURhdGEgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKGAubW9kYWwtcG9wdXBfX3dyYXBwZXJgKTtcbiAgICBwaG9uZS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgY2hlY2tQaG9uZSgpLCBmYWxzZSk7XG4gICAgbWFpbC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgY2hlY2tNYWlsKCksIGZhbHNlKTtcbiAgICBuYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBjaGVja05hbWUoKSwgZmFsc2UpO1xuICAgIGNvbnN0IGFsbFJpZ2h0ID0gIEFycmF5LmZyb20oaW5wdXRzKS5ldmVyeSgoZWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuY2hlY2tWYWxpZGl0eSgpICE9PSBmYWxzZTtcbiAgICB9KTtcbiAgICBpZiAoYWxsUmlnaHQpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRm9ybURhdGEoZm9ybURhdGEpO1xuICAgICAgdXBsb2FkRGF0YShkYXRhKTtcbiAgICAgIGhpZGVNb2RhbCgpO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
